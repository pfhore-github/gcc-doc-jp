*** gcc/doc/md.texi	2017-03-23 02:47:55.000000000 +0900
--- gcc/doc/md.texi	2018-04-11 00:49:59.000000000 +0900
***************
*** 1091,1097 ****
  have.  Constraints can also require two operands to match.
  Side-effects aren't allowed in operands of inline @code{asm}, unless
  @samp{<} or @samp{>} constraints are used, because there is no guarantee
! that the side-effects will happen exactly once in an instruction that can update
  the addressing register.
  
  @ifset INTERNALS
--- 1108,1114 ----
  have.  Constraints can also require two operands to match.
  Side-effects aren't allowed in operands of inline @code{asm}, unless
  @samp{<} or @samp{>} constraints are used, because there is no guarantee
! that the side effects will happen exactly once in an instruction that can update
  the addressing register.
  
  @ifset INTERNALS
***************
*** 1172,1180 ****
  A memory operand with autodecrement addressing (either predecrement or
  postdecrement) is allowed.  In inline @code{asm} this constraint is only
  allowed if the operand is used exactly once in an instruction that can
! handle the side-effects.  Not using an operand with @samp{<} in constraint
  string in the inline @code{asm} pattern at all or using it in multiple
! instructions isn't valid, because the side-effects wouldn't be performed
  or would be performed more than once.  Furthermore, on some targets
  the operand with @samp{<} in constraint string must be accompanied by
  special instruction suffixes like @code{%U0} instruction suffix on PowerPC
--- 1189,1197 ----
  A memory operand with autodecrement addressing (either predecrement or
  postdecrement) is allowed.  In inline @code{asm} this constraint is only
  allowed if the operand is used exactly once in an instruction that can
! handle the side effects.  Not using an operand with @samp{<} in constraint
  string in the inline @code{asm} pattern at all or using it in multiple
! instructions isn't valid, because the side effects wouldn't be performed
  or would be performed more than once.  Furthermore, on some targets
  the operand with @samp{<} in constraint string must be accompanied by
  special instruction suffixes like @code{%U0} instruction suffix on PowerPC
***************
*** 1735,1741 ****
  The stack pointer register (@code{SP})
  
  @item w
! Floating point or SIMD vector register
  
  @item I
  Integer constant that is valid as an immediate operand in an @code{ADD}
--- 1752,1764 ----
  The stack pointer register (@code{SP})
  
  @item w
! Floating point register, Advanced SIMD vector register or SVE vector register
! 
! @item Upl
! One of the low eight SVE predicate registers (@code{P0} to @code{P7})
! 
! @item Upa
! Any of the SVE predicate registers (@code{P0} to @code{P15})
  
  @item I
  Integer constant that is valid as an immediate operand in an @code{ADD}
***************
*** 4032,4055 ****
  @item u
  Second from top of 80387 floating-point stack (@code{%st(1)}).
  
  @item y
  Any MMX register.
  
  @item x
  Any SSE register.
  
  @item Yz
  First SSE register (@code{%xmm0}).
  
  @ifset INTERNALS
- @item Y2
- Any SSE register, when SSE2 is enabled.
- 
  @item Yi
  Any SSE register, when SSE2 and inter-unit moves are enabled.
  
  @item Ym
  Any MMX register, when inter-unit moves are enabled.
  @end ifset
  
  @item I
--- 4057,4151 ----
  @item u
  Second from top of 80387 floating-point stack (@code{%st(1)}).
  
+ @ifset INTERNALS
+ @item Yk
+ Any mask register that can be used as a predicate, i.e. @code{k1-k7}.
+ 
+ @item k
+ Any mask register.
+ @end ifset
+ 
  @item y
  Any MMX register.
  
  @item x
  Any SSE register.
  
+ @item v
+ Any EVEX encodable SSE register (@code{%xmm0-%xmm31}).
+ 
+ @ifset INTERNALS
+ @item w
+ Any bound register.
+ @end ifset
+ 
  @item Yz
  First SSE register (@code{%xmm0}).
  
  @ifset INTERNALS
  @item Yi
  Any SSE register, when SSE2 and inter-unit moves are enabled.
  
+ @item Yj
+ Any SSE register, when SSE2 and inter-unit moves from vector registers are enabled.
+ 
  @item Ym
  Any MMX register, when inter-unit moves are enabled.
+ 
+ @item Yn
+ Any MMX register, when inter-unit moves from vector registers are enabled.
+ 
+ @item Yp
+ Any integer register when @code{TARGET_PARTIAL_REG_STALL} is disabled.
+ 
+ @item Ya
+ Any integer register when zero extensions with @code{AND} are disabled.
+ 
+ @item Yb
+ Any register that can be used as the GOT base when calling@*
+ @code{___tls_get_addr}: that is, any general register except @code{a}
+ and @code{sp} registers, for @option{-fno-plt} if linker supports it.
+ Otherwise, @code{b} register.
+ 
+ @item Yf
+ Any x87 register when 80387 floating-point arithmetic is enabled.
+ 
+ @item Yr
+ Lower SSE register when avoiding REX prefix and all SSE registers otherwise.
+ 
+ @item Yv
+ For AVX512VL, any EVEX-encodable SSE register (@code{%xmm0-%xmm31}),
+ otherwise any SSE register.
+ 
+ @item Yh
+ Any EVEX-encodable SSE register, that has number factor of four.
+ 
+ @item Bf
+ Flags register operand.
+ 
+ @item Bg
+ GOT memory operand.
+ 
+ @item Bm
+ Vector memory operand.
+ 
+ @item Bc
+ Constant memory operand.
+ 
+ @item Bn
+ Memory operand without REX prefix.
+ 
+ @item Bs
+ Sibcall memory operand.
+ 
+ @item Bw
+ Call memory operand.
+ 
+ @item Bz
+ Constant call address operand.
+ 
+ @item BC
+ SSE constant -1 operand.
  @end ifset
  
  @item I
***************
*** 4087,4097 ****
  to fit that range (for immediate operands in sign-extending x86-64
  instructions).
  
  @item Z
  32-bit unsigned integer constant, or a symbolic reference known
  to fit that range (for immediate operands in zero-extending x86-64
  instructions).
  
  @end table
  
  @item Xstormy16---@file{config/stormy16/stormy16.h}
--- 4183,4219 ----
  to fit that range (for immediate operands in sign-extending x86-64
  instructions).
  
+ @item We
+ 32-bit signed integer constant, or a symbolic reference known
+ to fit that range (for sign-extending conversion operations that
+ require non-@code{VOIDmode} immediate operands).
+ 
+ @item Wz
+ 32-bit unsigned integer constant, or a symbolic reference known
+ to fit that range (for zero-extending conversion operations that
+ require non-@code{VOIDmode} immediate operands).
+ 
+ @item Wd
+ 128-bit integer constant where both the high and low 64-bit word
+ satisfy the @code{e} constraint.
+ 
  @item Z
  32-bit unsigned integer constant, or a symbolic reference known
  to fit that range (for immediate operands in zero-extending x86-64
  instructions).
  
+ @item Tv
+ VSIB address operand.
+ 
+ @item Ts
+ Address operand without segment register.
+ 
+ @item Ti
+ MPX address operand without index.
+ 
+ @item Tb
+ MPX address operand without base.
+ 
  @end table
  
  @item Xstormy16---@file{config/stormy16/stormy16.h}
