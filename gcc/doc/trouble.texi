@c Copyright (C) 1988-2018 Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@node Trouble
@chapter GCCの問題の既知の原因
@cindex bugs, known
@cindex installation trouble
@cindex known causes of trouble

このセクションでは、GCCのユーザーに影響する既知の問題について説明する。 これらのほとんどはGCCのバグではない。もしそうならば、修正されているだろう。 しかし、ユーザーにとっての結果は、バグの結果のようなものかもしれない。

これらの問題のいくつかは、他のソフトウェアのバグに起因するものもあれば、追加するにはあまりにも多くの作業が欠けているものもあれば、最良のものについて人々の意見が異なるところもある。

@menu
* Actual Bugs::         あとで修正する予定のバグ
* Interoperation::      他のコンパイラ、あるリンカ、アセンブラ、デバッガとともにGCCを使ったときの問題
* Incompatibilities::   GCCは伝統的なCと非互換である
* Fixed Headers::       GCCはシステムヘッダファイルの修正されたバージョンを使う。
                        これは必須だが、いつもスムーズに動くわけではない
* Standard Libraries::  GCCはシステムCライブラリを使うが、それはISO C標準に準拠していないかもしれない
* Disappointments::     残念なことに我々は変更できないが、全くのバグではない
* C++ Misunderstandings:: GNU C++でのよくある誤解
* Non-bugs::            我々は正しいと考えているが、同意していない人もいる
* Warnings and Errors:: 警告を出す問題とエラーを出す問題
@end menu

@node Actual Bugs
@section まだ修正していない実際のバグ

@itemize @bullet
@item
@code{fixincludes}スクリプトはオートマウンタとうまくやり取りしない。 システムヘッダファイルのディレクトリが自動マウントされていると、@ code{fixincludes}の実行中にアンマウントされる傾向がある。 これはオートマウンタのバグのようである。 我々はそれを回避する良い方法を知らない。
@end itemize

@node Interoperation
@section 相互運用

このセクションでは、他のコンパイラやアセンブラ、リンカ、ライブラリ、特定のシステム上のデバッガと一緒にGCCを使用する際に遭遇するさまざまな問題をリストする。

@itemize @bullet
@item
多くのプラットフォームでは、GCCは他のコンパイラとは異なるC++用ABIをサポートしているため、GCCでコンパイルされたオブジェクトファイルは別のC++コンパイラで生成されたオブジェクトファイルでは使用できない。

違いが最も顕著な領域は名前のマングリングである。 より微妙な問題からあなたを守るために、異なる名前のマングリングの使用は意図的である。コンパイラは、クラスインスタンスのレイアウト方法、多重継承の実装方法、仮想関数呼び出しの処理方法など、C++実装の多くの内部的な詳細について異なる。 名前のエンコーディングが同じになった場合、あなたのプログラムは他のコンパイラから提供されたライブラリとリンクするが、実行するとプログラムがクラッシュする。 互換性のないライブラリは、実行時ではなくリンク時に検出される。

@item
Ultrixのいくつかのバージョンを含むいくつかのBSDシステムでは、プロファイリングを使用すると、静的変数デストラクタ（現在はC++でのみ使用されている）が実行されなくなる。

@item
SPARCでは、GCCは8バイト境界で@code{double}型のすべての値を整列させ、すべての@code{double}がそのように整列することを期待している。 Sunコンパイラは通常、@code{double}の値に8バイトのアライメントを与えるが、1つの例外がある：@code{double}型の関数の引数は整列されないかもしれない。

その結果、Sun CCでコンパイルされた関数が@code{double}型の引数のアドレスを受け取り、このコードを@code{double *}の型にGCCでコンパイルされた関数に渡すと、ポインタの逆参照により致命的なシグナルを起こすかもしれない。

この問題を解決する1つの方法は、プログラム全体をGCCでコンパイルすることである。 別の解決策は、引数をローカル変数にコピーするためにSun CCでコンパイルされた関数を変更することである。 ローカル変数は常に正しく整列される。 3番目の解決方法は、直接@samp{*}ではなく、次の関数@code{access_double}を使用してポインタを使用する関数を参照解除することである。

@smallexample
inline double
access_double (double *unaligned_ptr)
@{
  union d2i @{ double d; int i[2]; @};

  union d2i *p = (union d2i *) unaligned_ptr;
  union d2i u;

  u.i[0] = p->i[0];
  u.i[1] = p->i[1];

  return u.d;
@}
@end smallexample

@noindent
ポインターへの格納は、同じユニオンで同様に行うことができる。

@item
Solarisでは、@file{libmalloc.a}ライブラリの@code{malloc}関数は、4バイトだけのアラインメントのメモリを割り当てる。 SPARCのGCCでは、倍精度が8バイト境界になっていると仮定しているため、倍精度が@file{libmalloc.a}ライブラリによって割り当てられたメモリに格納されていると、致命的なシグナルが発生する可能性がある。

解決策は、@file{libmalloc.a}ライブラリを使用しないことである。 @file{libc.a}の@code{malloc}や関連する関数を使用すること。それらはこの問題を抱えていない。

@item
HP PAマシンでは、GCCでコンパイルされた関数でADBが動作しないことがある。 具体的には、@code{alloca}や可変長配列を使用する関数では機能しない。 これは、GCCがそのような機能のHP-UX unwind descriptorを生成しないためである。 それを生成することは不可能かもしれない。

@item
予備GNUツールを使用しない限り、デバッグ（@option{-g}）はHP PAマシンではサポートされていない。

@item
ラベルのアドレスをとると、HP-UX PAアセンブラからエラーが発生する可能性がある。 PAのGASにはこの問題はない。

@item
HPアセンブラを使用しているときは、静的関数への間接呼び出しに浮動小数点パラメータを使用しても機能しない。 GCCは、HPアセンブラを使用するときに、スタティック関数の引数を保持するレジスタを指定する方法がない。 PAのGASにはこの問題はない。

@item
非常に大きな関数がいくつか含まれている非常にまれなケースでは、範囲外のブランチオフセットについて不平を言うHPリンカからエラーを受け取ることがある。 これはGCCの以前のバージョンでより頻繁に発生していたが、現在はまれである。 それを実行する必要がある場合は、関数を小さくすることで回避できる。

@item
GCCコンパイルされたコードでは、次の形式のHP-UXアセンブラから警告が出力されることがある。

@smallexample
(warning) Use of GR3 when
  frame >= 8192 may cause conflict.
@end smallexample

これらの警告は無害であり、安全に無視することができる。

@item
非常に大きな関数がいくつか含まれている非常にまれなケースでは、大きすぎる変位について不平を言うAIXアセンブラからエラーを受け取ることがある。 それを実行する必要がある場合は、関数を小さくすることで回避できる。

@item
GCCの@file{libstdc++.a}ライブラリは、特にC++ストリーム機能に必要な、ライブラリとアプリケーション間のグローバルシンボルをマージするSVR4ダイナミックリンカのセマンティクスに依存している。 これは、AIX共有ライブラリーと動的リンクのデフォルトの動作ではない。@file{libstdc++.a}は、「ランタイムリンク」が有効になっているAIX上に構築されているため、シンボルのマージが可能である。 この機能を利用するには、@file{libstdc++.a}にリンクされているアプリケーションでリンク行に@option{-Wl,-brtl}フラグを含める必要がある。 G++はこれを強制することはできない。なぜなら、このオプションはユーザプログラムのセマンティクスを妨げる可能性があり、ユーザは@samp{g++}を使用してアプリケーションをリンクするとは限らない。アプリケーションは、リンク行で@option{-Wl,-brtl}フラグを使用する必要はない。シンボル統合のセマンティクスに依存しない残りの@file{libstdc++.a}ライブラリは引き続き正しく機能する。

@item
アプリケーションは、@file{libstdc++.a}で呼び出された関数の独自の関数定義を、AIXで使用可能な「ランタイム・リンク」に置き換えることができる。 これを実現するには、アプリケーションを「ランタイムリンク」オプションでリンクする必要があり、明示的にアプリケーションからエクスポートする必要がある（@option {-Wl,-brtl,-bE:exportfile}）。

@item
RS/6000上のAIXは、米国以外の環境でのサポート（NLS）を提供する。 コンパイラとアセンブラは、浮動小数点数（小数点を区切る文字が@samp{.}か@samp{,}）を含むさまざまなオブジェクトのロケール固有の表現をサポートするためにNLSを使用する。 GCCにリンクされたライブラリが、アセンブラが受け付けるのと同じ浮動小数点フォーマットを生成しないという問題が報告されている。 この問題がある場合は、環境変数@env{LANG}を@samp{C}または@samp {En_US}に設定する。

@item
@opindex fdollars-in-identifiers
@option{-fdollars-in-identifiers}を指定しても、IBMアセンブラの制限のためにRS/6000の識別子に@samp{$}を正常に使用することはできない。 GASはこれらの識別子をサポートしている。

@end itemize

@node Incompatibilities
@section GCCの非互換性
@cindex incompatibilities of GCC
@opindex traditional

GNU CとK＆R（非ISO）バージョンの間には、いくつかの非互換性がある。

@itemize @bullet
@cindex string constants
@cindex read-only strings
@cindex shared strings
@item
GCCは通常、文字列定数を読み取り専用にする。 同じ見た目の文字列定数が複数使用されている場合、GCCは文字列のコピーを1つだけ格納する。

@cindex @code{mktemp}, and constant strings
1つの結果として、文字定数の引数で@code {mktemp}を呼び出すことはできない。 関数@code{mktemp}は、引数が指す文字列を常に変更する。

@cindex @code{sscanf}, and constant strings
@cindex @code{fscanf}, and constant strings
@cindex @code{scanf}, and constant strings
もう1つの結果は、@code{sscanf}は、フォーマット制御文字列または入力として文字列定数を渡すと、非常に古いシステムでは動作しないということである。 これは、@code{sscanf}が文字列定数に誤って書き込もうとするためである。 @code{fscanf}と@code{scanf}も同様。

これらの問題を解決するには、文字列定数ではなく、これらの目的のために初期化文字列で@code{char}配列変数を使用するようにプログラムを変更することである。

@item
@code{-2147483648}は正である。

これは、2147483648が@code{int}型に収まりきらないためであり、（ISO Cの規則に従って）そのデータ型は@code{unsigned long int}である。 この値を否定すると、再び2147483648が返される。

@item
GCCは、文字列定数の内部に現れたときにマクロ引数を置換しない。 たとえば、GCCの次のマクロ

@smallexample
#define foo(a) "a"
@end smallexample

@noindent
は@var{a}の引数に関係なく、出力@code{"a"}を生成する。

@cindex @code{setjmp} incompatibilities
@cindex @code{longjmp} incompatibilities
@item
@code{setjmp}と@code{longjmp}を使用すると、有効であることが保証されている唯一の自動変数は@code{volatile}と宣言されたものである。 これは自動レジスタ割り付けの結果である。 この関数を考えてみる：

@smallexample
jmp_buf j;

foo ()
@{
  int a, b;

  a = fun1 ();
  if (setjmp (j))
    return a;

  a = fun2 ();
  /* @r{@code{longjmp (j)} may occur in @code{fun3}.} */
  return a + fun3 ();
@}
@end smallexample

ここで@code{a}は、@code{longjmp}が発生したときに最初の値に復元される場合とされない場合がある。 @code{a}がレジスタに割り当てられている場合、その最初の値が復元される。 それ以外の場合は、最後に保存された値を保持する。

@opindex W
@option{-W}オプションを@option{-O}オプションとともに使用すると、GCCがそのような問題が発生する可能性があると判断した場合に警告が表示される。

@item
マクロ引数の途中で前処理ディレクティブを使用するプログラムは、GCCでは動作しない。 たとえば、次のようなプログラムは動作しない。

@smallexample
@group
foobar (
#define luser
        hack)
@end group
@end smallexample

ISO Cはそのような構成を許可していない。

@item
K＆Rコンパイラは、コメントがインクルード境界（つまり、インクルードファイルで開始され、そのインクルードファイルで終了する）を横切るのを許可する。

@cindex external declaration scope
@cindex scope of external declarations
@cindex declaration scope
@item
ブロック内の外部変数および関数の宣言は、宣言を含むブロックにのみ適用される。 言い換えれば、それらは同じ場所で他の宣言と同じスコープを持っている。

他のCコンパイラでは、@code{extern}宣言は、ブロック内で発生したとしても残りのすべてのファイルに影響する。

@item
伝統的なCでは、以下に示すように@code{long}などをtypedef名と組み合わせることができる：

@smallexample
typedef int foo;
typedef long foo bar;
@end smallexample

ISO Cでは、これは許されない：@code{long}と他の型修飾子は明示的な@code{int}を必要とする。

@cindex typedef names as function parameters
@item
PCCでは、typedef名を関数パラメータとして使用できる。

@item
伝統的なCでは、次のような誤った宣言のペアを指定のスコープで一緒に表示できる。

@smallexample
typedef int foo;
typedef foo foo;
@end smallexample

@item
GCCは、識別子のすべての文字を有効として扱う。 K＆R-1（2.2）によると、「最初の8文字より後は重要ではないが、使うことはできる。」 また、K＆R-1（2.2）によると、「識別子は文字と数字のシーケンスで、最初の文字は文字でなければならない。下線_は文字としてカウントされる。」しかしGCCでは識別子でドル記号も使用できる。

@cindex whitespace
@item
PCCでは、@samp{+=}のような複合代入演算子の中間に空白を入れることができる。 GCCは、ISO標準に従って、これを許可していない。

@cindex apostrophes
@cindex @code{'}
@item
GCCは、失敗した前処理条件の中で、終端されていない文字定数について不平を言う。 一部のプログラムでは、条件付きで囲まれた英語のコメントが失敗することが保証されている。 これらのコメントにアポストロフィが含まれていると、GCCはおそらくエラーを報告する。 たとえば、次のコードではエラーが発生する。

@smallexample
#if 0
You can't expect this to work.
#endif
@end smallexample

このような問題に対する最良の解決策は、テキストを@samp{/*@dots{}*/}で区切られた実際のCコメントに入れることである。

@item
多くのユーザープログラムには、@samp{long time ();}という宣言が含まれている。 以前は、多くのシステムのシステムヘッダファイルは実際に@code{time}を宣言していなかったので、プログラムが返すと宣言したタイプは関係なかった。 しかしISO Cヘッダを持つシステムでは、@code{time}は@code {time_t}を返すと宣言され、それが@code{long}と同じでない場合、@samp{long time();}は間違っている。

解決策は、システムヘッダーファイルが宣言しているならば、プログラムが適切なシステムヘッダー（ISO Cヘッダーを持つシステムで@code{<time.h>}）を使用して@code{time}を宣言しないようにプログラムを変更するか、さもなければ@code{time}の戻り値の型として@code {time_t}を使用することである。

@cindex @code{float} as function value type
@item
@code{float}を返す関数をコンパイルするとき、PCCはそれをdoubleに変換する。 GCCは実際に@code{float}を返す。 PCCの互換性に関心がある場合は、@code{double}を返す関数を宣言する必要がある。あなたは同様に何を意図するかを言うべきである。

@cindex structures
@cindex unions
@item
構造体または共用体を返す関数をコンパイルするとき、GCC出力コードは通常、ほとんどのバージョンのUnixで使用されているものとは異なる方法を使用する。 その結果、GCCでコンパイルされたコードは、PCCでコンパイルされた構造体戻り関数を呼び出すことはできず、その逆できない。

GCCで使用される方法は、次のとおりである。1,2,4または8バイトの長さの構造体または共用体がスカラーのように返される。 他のサイズの構造体または共用体は、呼び出し元によって指定されたアドレスに格納される（通常、特殊な固定レジスタがあるが、一部のマシンではスタックに渡される）。 ターゲットフック@code{TARGET_STRUCT_VALUE_RTX}は、このアドレスをどこに渡すべきかをGCCに伝える。

対照的に、ほとんどのターゲットマシン上のPCCは、静的ストレージの領域にデータをコピーし、そのストレージのアドレスをポインタ値のように返すことによって、任意のサイズの構造体および共用体を返す。 呼び出し元は、そのメモリ領域から値が必要な場所にデータをコピーする必要がある。 この方法は遅く、非リエントラントなので、GCCではこの方法は使用しない。

より新しいいくつかのマシンでは、PCCはすべての構造体および共用体が戻ってくるための再入可能な規則を使用する。 これらのマシンの大部分のGCCは構造体と共用体をメモリに戻すときに互換性のある規約を使用するが、小さな構造体と共用体をレジスタに返す。

@opindex fpcc-struct-return
@option {-fpcc-struct-return}オプションを指定して返されるすべての構造体および共用体に対して、互換性のある規約を使用するようにGCCに指示できる。

@cindex preprocessing tokens
@cindex preprocessing numbers
@item
GCCは、@samp{0x74ae-0x4000}のようなマイナス演算子で区切られた2つの16進定数のように見えるプログラムフラグメントについて文句を言う。 実際には、この文字列は単一の@dfn{preprocessing token}（前処理トークン）である。 このような各トークンは、C内の1つのトークンに対応しなければならない。 これはしていないので、GCCはエラーメッセージを表示する。 オペレータと2つの値が意味されていることは明らかだが、ISO C標準では、特にこれが誤ったものとして扱われることを要求している。

@dfn{preprocessing token}（前処理トークン）は、数字で始まり、文字、アンダースコア、数字、ピリオド、@samp{e+}、@samp{e-}、@samp{E+}、@samp{E-}、@samp{p+}、@samp{p-}、@samp{P+}、または@samp{P-}の文字シーケンスである。 （厳密なC90モードでは、シーケンス@samp{p+}、@samp{p-}、@samp{P+}と@samp{P-}は前処理番号に現れない）

上記のプログラムフラグメントを有効にするには、空白をマイナス記号の前に置く。 この空白は前処理番号を終了する。
@end itemize

@node Fixed Headers
@section 修正されたヘッダファイル

GCCはいくつかのシステムヘッダファイルの修正版をインストールする必要がある。 これは、ほとんどのターゲットシステムには、変更されない限り、GCCで動作しないヘッダファイルがいくつかあるためである。 バグを持つものもあれば、ISO Cと互換性がないものもあれば、他のコンパイラの特殊機能に依存するものもある。

GCCをインストールすると、@code{fixincludes}というプログラムを実行することによって、固定ヘッダファイルが自動的に作成され、インストールされる。 通常、これに注意する必要はない。 しかし、自動的に正しいことをしないケースがある。

@itemize @bullet
@item
新しいシステムバージョンをインストールするなど、システムのヘッダーファイルを更新すると、GCCの固定ヘッダーファイルは自動的に更新されない。 @file{@var{libexecdir}/gcc/@var{target}/@var{version}/install-tools/}にインストールされている@command{mkheaders}スクリプトを使用して更新できる。

@item
いくつかのシステムでは、ヘッダーファイルのディレクトリには、特定の場所にマシン固有のシンボリックリンクが含まれている。 これにより、異なるマシンモデル上の同じバージョンのシステムを実行しているホスト間でほとんどのヘッダーファイルを共有することができる。

ヘッダーファイルを修正するプログラムは、シンボリックリンクを使用するこの特別な方法を理解していない。 したがって、固定ヘッダファイルのディレクトリは、それを構築するために使用されたマシンモデルに対してのみ有効である。

異なるマシンモデル用の固定ヘッダーファイルを別々に作成し、適切なセットを使用するようにシンボリックリンクの構造を調整することは可能だが、手動で行う必要がある。
@end itemize

@node Standard Libraries
@section Standard Libraries

@opindex Wall
GCC by itself attempts to be a conforming freestanding implementation.
@xref{Standards,,Language Standards Supported by GCC}, for details of
what this means.  Beyond the library facilities required of such an
implementation, the rest of the C library is supplied by the vendor of
the operating system.  If that C library doesn't conform to the C
standards, then your programs might get warnings (especially when using
@option{-Wall}) that you don't expect.

For example, the @code{sprintf} function on SunOS 4.1.3 returns
@code{char *} while the C standard says that @code{sprintf} returns an
@code{int}.  The @code{fixincludes} program could make the prototype for
this function match the Standard, but that would be wrong, since the
function will still return @code{char *}.

If you need a Standard compliant library, then you need to find one, as
GCC does not provide one.  The GNU C library (called @code{glibc})
provides ISO C, POSIX, BSD, SystemV and X/Open compatibility for
GNU/Linux and HURD-based GNU systems; no recent version of it supports
other systems, though some very old versions did.  Version 2.2 of the
GNU C library includes nearly complete C99 support.  You could also ask
your operating system vendor if newer libraries are available.

@node Disappointments
@section Disappointments and Misunderstandings

These problems are perhaps regrettable, but we don't know any practical
way around them.

@itemize @bullet
@item
Certain local variables aren't recognized by debuggers when you compile
with optimization.

This occurs because sometimes GCC optimizes the variable out of
existence.  There is no way to tell the debugger how to compute the
value such a variable ``would have had'', and it is not clear that would
be desirable anyway.  So GCC simply does not mention the eliminated
variable when it writes debugging information.

You have to expect a certain amount of disagreement between the
executable and your source code, when you use optimization.

@cindex conflicting types
@cindex scope of declaration
@item
Users often think it is a bug when GCC reports an error for code
like this:

@smallexample
int foo (struct mumble *);

struct mumble @{ @dots{} @};

int foo (struct mumble *x)
@{ @dots{} @}
@end smallexample

This code really is erroneous, because the scope of @code{struct
mumble} in the prototype is limited to the argument list containing it.
It does not refer to the @code{struct mumble} defined with file scope
immediately below---they are two unrelated types with similar names in
different scopes.

But in the definition of @code{foo}, the file-scope type is used
because that is available to be inherited.  Thus, the definition and
the prototype do not match, and you get an error.

This behavior may seem silly, but it's what the ISO standard specifies.
It is easy enough for you to make your code work by moving the
definition of @code{struct mumble} above the prototype.  It's not worth
being incompatible with ISO C just to avoid an error for the example
shown above.

@item
Accesses to bit-fields even in volatile objects works by accessing larger
objects, such as a byte or a word.  You cannot rely on what size of
object is accessed in order to read or write the bit-field; it may even
vary for a given bit-field according to the precise usage.

If you care about controlling the amount of memory that is accessed, use
volatile but do not use bit-fields.

@item
GCC comes with shell scripts to fix certain known problems in system
header files.  They install corrected copies of various header files in
a special directory where only GCC will normally look for them.  The
scripts adapt to various systems by searching all the system header
files for the problem cases that we know about.

If new system header files are installed, nothing automatically arranges
to update the corrected header files.  They can be updated using the
@command{mkheaders} script installed in
@file{@var{libexecdir}/gcc/@var{target}/@var{version}/install-tools/}.

@item
@cindex floating point precision
On 68000 and x86 systems, for instance, you can get paradoxical results
if you test the precise values of floating point numbers.  For example,
you can find that a floating point value which is not a NaN is not equal
to itself.  This results from the fact that the floating point registers
hold a few more bits of precision than fit in a @code{double} in memory.
Compiled code moves values between memory and floating point registers
at its convenience, and moving them into memory truncates them.

@opindex ffloat-store
You can partially avoid this problem by using the @option{-ffloat-store}
option (@pxref{Optimize Options}).

@item
On AIX and other platforms without weak symbol support, templates
need to be instantiated explicitly and symbols for static members
of templates will not be generated.

@item
On AIX, GCC scans object files and library archives for static
constructors and destructors when linking an application before the
linker prunes unreferenced symbols.  This is necessary to prevent the
AIX linker from mistakenly assuming that static constructor or
destructor are unused and removing them before the scanning can occur.
All static constructors and destructors found will be referenced even
though the modules in which they occur may not be used by the program.
This may lead to both increased executable size and unexpected symbol
references.
@end itemize

@node C++ Misunderstandings
@section Common Misunderstandings with GNU C++

@cindex misunderstandings in C++
@cindex surprises in C++
@cindex C++ misunderstandings
C++ is a complex language and an evolving one, and its standard
definition (the ISO C++ standard) was only recently completed.  As a
result, your C++ compiler may occasionally surprise you, even when its
behavior is correct.  This section discusses some areas that frequently
give rise to questions of this sort.

@menu
* Static Definitions::  Static member declarations are not definitions
* Name lookup::         Name lookup, templates, and accessing members of base classes
* Temporaries::         Temporaries may vanish before you expect
* Copy Assignment::     Copy Assignment operators copy virtual bases twice
@end menu

@node Static Definitions
@subsection Declare @emph{and} Define Static Members

@cindex C++ static data, declaring and defining
@cindex static data in C++, declaring and defining
@cindex declaring static data in C++
@cindex defining static data in C++
When a class has static data members, it is not enough to @emph{declare}
the static member; you must also @emph{define} it.  For example:

@smallexample
class Foo
@{
  @dots{}
  void method();
  static int bar;
@};
@end smallexample

This declaration only establishes that the class @code{Foo} has an
@code{int} named @code{Foo::bar}, and a member function named
@code{Foo::method}.  But you still need to define @emph{both}
@code{method} and @code{bar} elsewhere.  According to the ISO
standard, you must supply an initializer in one (and only one) source
file, such as:

@smallexample
int Foo::bar = 0;
@end smallexample

Other C++ compilers may not correctly implement the standard behavior.
As a result, when you switch to @command{g++} from one of these compilers,
you may discover that a program that appeared to work correctly in fact
does not conform to the standard: @command{g++} reports as undefined
symbols any static data members that lack definitions.


@node Name lookup
@subsection Name Lookup, Templates, and Accessing Members of Base Classes

@cindex base class members
@cindex two-stage name lookup
@cindex dependent name lookup

The C++ standard prescribes that all names that are not dependent on
template parameters are bound to their present definitions when parsing
a template function or class.@footnote{The C++ standard just uses the
term ``dependent'' for names that depend on the type or value of
template parameters.  This shorter term will also be used in the rest of
this section.}  Only names that are dependent are looked up at the point
of instantiation.  For example, consider

@smallexample
  void foo(double);

  struct A @{
    template <typename T>
    void f () @{
      foo (1);        // @r{1}
      int i = N;      // @r{2}
      T t;
      t.bar();        // @r{3}
      foo (t);        // @r{4}
    @}

    static const int N;
  @};
@end smallexample

Here, the names @code{foo} and @code{N} appear in a context that does
not depend on the type of @code{T}.  The compiler will thus require that
they are defined in the context of use in the template, not only before
the point of instantiation, and will here use @code{::foo(double)} and
@code{A::N}, respectively.  In particular, it will convert the integer
value to a @code{double} when passing it to @code{::foo(double)}.

Conversely, @code{bar} and the call to @code{foo} in the fourth marked
line are used in contexts that do depend on the type of @code{T}, so
they are only looked up at the point of instantiation, and you can
provide declarations for them after declaring the template, but before
instantiating it.  In particular, if you instantiate @code{A::f<int>},
the last line will call an overloaded @code{::foo(int)} if one was
provided, even if after the declaration of @code{struct A}.

This distinction between lookup of dependent and non-dependent names is
called two-stage (or dependent) name lookup.  G++ implements it
since version 3.4.

Two-stage name lookup sometimes leads to situations with behavior
different from non-template codes.  The most common is probably this:

@smallexample
  template <typename T> struct Base @{
    int i;
  @};

  template <typename T> struct Derived : public Base<T> @{
    int get_i() @{ return i; @}
  @};
@end smallexample

In @code{get_i()}, @code{i} is not used in a dependent context, so the
compiler will look for a name declared at the enclosing namespace scope
(which is the global scope here).  It will not look into the base class,
since that is dependent and you may declare specializations of
@code{Base} even after declaring @code{Derived}, so the compiler cannot
really know what @code{i} would refer to.  If there is no global
variable @code{i}, then you will get an error message.

In order to make it clear that you want the member of the base class,
you need to defer lookup until instantiation time, at which the base
class is known.  For this, you need to access @code{i} in a dependent
context, by either using @code{this->i} (remember that @code{this} is of
type @code{Derived<T>*}, so is obviously dependent), or using
@code{Base<T>::i}.  Alternatively, @code{Base<T>::i} might be brought
into scope by a @code{using}-declaration.

Another, similar example involves calling member functions of a base
class:

@smallexample
  template <typename T> struct Base @{
      int f();
  @};

  template <typename T> struct Derived : Base<T> @{
      int g() @{ return f(); @};
  @};
@end smallexample

Again, the call to @code{f()} is not dependent on template arguments
(there are no arguments that depend on the type @code{T}, and it is also
not otherwise specified that the call should be in a dependent context).
Thus a global declaration of such a function must be available, since
the one in the base class is not visible until instantiation time.  The
compiler will consequently produce the following error message:

@smallexample
  x.cc: In member function `int Derived<T>::g()':
  x.cc:6: error: there are no arguments to `f' that depend on a template
     parameter, so a declaration of `f' must be available
  x.cc:6: error: (if you use `-fpermissive', G++ will accept your code, but
     allowing the use of an undeclared name is deprecated)
@end smallexample

To make the code valid either use @code{this->f()}, or
@code{Base<T>::f()}.  Using the @option{-fpermissive} flag will also let
the compiler accept the code, by marking all function calls for which no
declaration is visible at the time of definition of the template for
later lookup at instantiation time, as if it were a dependent call.
We do not recommend using @option{-fpermissive} to work around invalid
code, and it will also only catch cases where functions in base classes
are called, not where variables in base classes are used (as in the
example above).

Note that some compilers (including G++ versions prior to 3.4) get these
examples wrong and accept above code without an error.  Those compilers
do not implement two-stage name lookup correctly.


@node Temporaries
@subsection Temporaries May Vanish Before You Expect

@cindex temporaries, lifetime of
@cindex portions of temporary objects, pointers to
It is dangerous to use pointers or references to @emph{portions} of a
temporary object.  The compiler may very well delete the object before
you expect it to, leaving a pointer to garbage.  The most common place
where this problem crops up is in classes like string classes,
especially ones that define a conversion function to type @code{char *}
or @code{const char *}---which is one reason why the standard
@code{string} class requires you to call the @code{c_str} member
function.  However, any class that returns a pointer to some internal
structure is potentially subject to this problem.

For example, a program may use a function @code{strfunc} that returns
@code{string} objects, and another function @code{charfunc} that
operates on pointers to @code{char}:

@smallexample
string strfunc ();
void charfunc (const char *);

void
f ()
@{
  const char *p = strfunc().c_str();
  @dots{}
  charfunc (p);
  @dots{}
  charfunc (p);
@}
@end smallexample

@noindent
In this situation, it may seem reasonable to save a pointer to the C
string returned by the @code{c_str} member function and use that rather
than call @code{c_str} repeatedly.  However, the temporary string
created by the call to @code{strfunc} is destroyed after @code{p} is
initialized, at which point @code{p} is left pointing to freed memory.

Code like this may run successfully under some other compilers,
particularly obsolete cfront-based compilers that delete temporaries
along with normal local variables.  However, the GNU C++ behavior is
standard-conforming, so if your program depends on late destruction of
temporaries it is not portable.

The safe way to write such code is to give the temporary a name, which
forces it to remain until the end of the scope of the name.  For
example:

@smallexample
const string& tmp = strfunc ();
charfunc (tmp.c_str ());
@end smallexample

@node Copy Assignment
@subsection Implicit Copy-Assignment for Virtual Bases

When a base class is virtual, only one subobject of the base class
belongs to each full object.  Also, the constructors and destructors are
invoked only once, and called from the most-derived class.  However, such
objects behave unspecified when being assigned.  For example:

@smallexample
struct Base@{
  char *name;
  Base(char *n) : name(strdup(n))@{@}
  Base& operator= (const Base& other)@{
   free (name);
   name = strdup (other.name);
  @}
@};

struct A:virtual Base@{
  int val;
  A():Base("A")@{@}
@};

struct B:virtual Base@{
  int bval;
  B():Base("B")@{@}
@};

struct Derived:public A, public B@{
  Derived():Base("Derived")@{@}
@};

void func(Derived &d1, Derived &d2)
@{
  d1 = d2;
@}
@end smallexample

The C++ standard specifies that @samp{Base::Base} is only called once
when constructing or copy-constructing a Derived object.  It is
unspecified whether @samp{Base::operator=} is called more than once when
the implicit copy-assignment for Derived objects is invoked (as it is
inside @samp{func} in the example).

G++ implements the ``intuitive'' algorithm for copy-assignment: assign all
direct bases, then assign all members.  In that algorithm, the virtual
base subobject can be encountered more than once.  In the example, copying
proceeds in the following order: @samp{val}, @samp{name} (via
@code{strdup}), @samp{bval}, and @samp{name} again.

If application code relies on copy-assignment, a user-defined
copy-assignment operator removes any uncertainties.  With such an
operator, the application can define whether and how the virtual base
subobject is assigned.

@node Non-bugs
@section Certain Changes We Don't Want to Make

This section lists changes that people frequently request, but which
we do not make because we think GCC is better without them.

@itemize @bullet
@item
Checking the number and type of arguments to a function which has an
old-fashioned definition and no prototype.

Such a feature would work only occasionally---only for calls that appear
in the same file as the called function, following the definition.  The
only way to check all calls reliably is to add a prototype for the
function.  But adding a prototype eliminates the motivation for this
feature.  So the feature is not worthwhile.

@item
Warning about using an expression whose type is signed as a shift count.

Shift count operands are probably signed more often than unsigned.
Warning about this would cause far more annoyance than good.

@item
Warning about assigning a signed value to an unsigned variable.

Such assignments must be very common; warning about them would cause
more annoyance than good.

@item
Warning when a non-void function value is ignored.

C contains many standard functions that return a value that most
programs choose to ignore.  One obvious example is @code{printf}.
Warning about this practice only leads the defensive programmer to
clutter programs with dozens of casts to @code{void}.  Such casts are
required so frequently that they become visual noise.  Writing those
casts becomes so automatic that they no longer convey useful
information about the intentions of the programmer.  For functions
where the return value should never be ignored, use the
@code{warn_unused_result} function attribute (@pxref{Function
Attributes}).

@item
@opindex fshort-enums
Making @option{-fshort-enums} the default.

This would cause storage layout to be incompatible with most other C
compilers.  And it doesn't seem very important, given that you can get
the same result in other ways.  The case where it matters most is when
the enumeration-valued object is inside a structure, and in that case
you can specify a field width explicitly.

@item
Making bit-fields unsigned by default on particular machines where ``the
ABI standard'' says to do so.

The ISO C standard leaves it up to the implementation whether a bit-field
declared plain @code{int} is signed or not.  This in effect creates two
alternative dialects of C@.

@opindex fsigned-bitfields
@opindex funsigned-bitfields
The GNU C compiler supports both dialects; you can specify the signed
dialect with @option{-fsigned-bitfields} and the unsigned dialect with
@option{-funsigned-bitfields}.  However, this leaves open the question of
which dialect to use by default.

Currently, the preferred dialect makes plain bit-fields signed, because
this is simplest.  Since @code{int} is the same as @code{signed int} in
every other context, it is cleanest for them to be the same in bit-fields
as well.

Some computer manufacturers have published Application Binary Interface
standards which specify that plain bit-fields should be unsigned.  It is
a mistake, however, to say anything about this issue in an ABI@.  This is
because the handling of plain bit-fields distinguishes two dialects of C@.
Both dialects are meaningful on every type of machine.  Whether a
particular object file was compiled using signed bit-fields or unsigned
is of no concern to other object files, even if they access the same
bit-fields in the same data structures.

A given program is written in one or the other of these two dialects.
The program stands a chance to work on most any machine if it is
compiled with the proper dialect.  It is unlikely to work at all if
compiled with the wrong dialect.

Many users appreciate the GNU C compiler because it provides an
environment that is uniform across machines.  These users would be
inconvenienced if the compiler treated plain bit-fields differently on
certain machines.

Occasionally users write programs intended only for a particular machine
type.  On these occasions, the users would benefit if the GNU C compiler
were to support by default the same dialect as the other compilers on
that machine.  But such applications are rare.  And users writing a
program to run on more than one type of machine cannot possibly benefit
from this kind of compatibility.

This is why GCC does and will treat plain bit-fields in the same
fashion on all types of machines (by default).

There are some arguments for making bit-fields unsigned by default on all
machines.  If, for example, this becomes a universal de facto standard,
it would make sense for GCC to go along with it.  This is something
to be considered in the future.

(Of course, users strongly concerned about portability should indicate
explicitly in each bit-field whether it is signed or not.  In this way,
they write programs which have the same meaning in both C dialects.)

@item
@opindex ansi
@opindex std
Undefining @code{__STDC__} when @option{-ansi} is not used.

Currently, GCC defines @code{__STDC__} unconditionally.  This provides
good results in practice.

Programmers normally use conditionals on @code{__STDC__} to ask whether
it is safe to use certain features of ISO C, such as function
prototypes or ISO token concatenation.  Since plain @command{gcc} supports
all the features of ISO C, the correct answer to these questions is
``yes''.

Some users try to use @code{__STDC__} to check for the availability of
certain library facilities.  This is actually incorrect usage in an ISO
C program, because the ISO C standard says that a conforming
freestanding implementation should define @code{__STDC__} even though it
does not have the library facilities.  @samp{gcc -ansi -pedantic} is a
conforming freestanding implementation, and it is therefore required to
define @code{__STDC__}, even though it does not come with an ISO C
library.

Sometimes people say that defining @code{__STDC__} in a compiler that
does not completely conform to the ISO C standard somehow violates the
standard.  This is illogical.  The standard is a standard for compilers
that claim to support ISO C, such as @samp{gcc -ansi}---not for other
compilers such as plain @command{gcc}.  Whatever the ISO C standard says
is relevant to the design of plain @command{gcc} without @option{-ansi} only
for pragmatic reasons, not as a requirement.

GCC normally defines @code{__STDC__} to be 1, and in addition
defines @code{__STRICT_ANSI__} if you specify the @option{-ansi} option,
or a @option{-std} option for strict conformance to some version of ISO C@.
On some hosts, system include files use a different convention, where
@code{__STDC__} is normally 0, but is 1 if the user specifies strict
conformance to the C Standard.  GCC follows the host convention when
processing system include files, but when processing user files it follows
the usual GNU C convention.

@item
Undefining @code{__STDC__} in C++.

Programs written to compile with C++-to-C translators get the
value of @code{__STDC__} that goes with the C compiler that is
subsequently used.  These programs must test @code{__STDC__}
to determine what kind of C preprocessor that compiler uses:
whether they should concatenate tokens in the ISO C fashion
or in the traditional fashion.

These programs work properly with GNU C++ if @code{__STDC__} is defined.
They would not work otherwise.

In addition, many header files are written to provide prototypes in ISO
C but not in traditional C@.  Many of these header files can work without
change in C++ provided @code{__STDC__} is defined.  If @code{__STDC__}
is not defined, they will all fail, and will all need to be changed to
test explicitly for C++ as well.

@item
Deleting ``empty'' loops.

Historically, GCC has not deleted ``empty'' loops under the
assumption that the most likely reason you would put one in a program is
to have a delay, so deleting them will not make real programs run any
faster.

However, the rationale here is that optimization of a nonempty loop
cannot produce an empty one. This held for carefully written C compiled
with less powerful optimizers but is not always the case for carefully
written C++ or with more powerful optimizers.
Thus GCC will remove operations from loops whenever it can determine
those operations are not externally visible (apart from the time taken
to execute them, of course).  In case the loop can be proved to be finite,
GCC will also remove the loop itself.

Be aware of this when performing timing tests, for instance the
following loop can be completely removed, provided
@code{some_expression} can provably not change any global state.

@smallexample
@{
   int sum = 0;
   int ix;

   for (ix = 0; ix != 10000; ix++)
      sum += some_expression;
@}
@end smallexample

Even though @code{sum} is accumulated in the loop, no use is made of
that summation, so the accumulation can be removed.

@item
Making side effects happen in the same order as in some other compiler.

@cindex side effects, order of evaluation
@cindex order of evaluation, side effects
It is never safe to depend on the order of evaluation of side effects.
For example, a function call like this may very well behave differently
from one compiler to another:

@smallexample
void func (int, int);

int i = 2;
func (i++, i++);
@end smallexample

There is no guarantee (in either the C or the C++ standard language
definitions) that the increments will be evaluated in any particular
order.  Either increment might happen first.  @code{func} might get the
arguments @samp{2, 3}, or it might get @samp{3, 2}, or even @samp{2, 2}.

@item
Making certain warnings into errors by default.

Some ISO C testsuites report failure when the compiler does not produce
an error message for a certain program.

@opindex pedantic-errors
ISO C requires a ``diagnostic'' message for certain kinds of invalid
programs, but a warning is defined by GCC to count as a diagnostic.  If
GCC produces a warning but not an error, that is correct ISO C support.
If testsuites call this ``failure'', they should be run with the GCC
option @option{-pedantic-errors}, which will turn these warnings into
errors.

@end itemize

@node Warnings and Errors
@section Warning Messages and Error Messages

@cindex error messages
@cindex warnings vs errors
@cindex messages, warning and error
The GNU compiler can produce two kinds of diagnostics: errors and
warnings.  Each kind has a different purpose:

@itemize @w{}
@item
@dfn{Errors} report problems that make it impossible to compile your
program.  GCC reports errors with the source file name and line
number where the problem is apparent.

@item
@dfn{Warnings} report other unusual conditions in your code that
@emph{may} indicate a problem, although compilation can (and does)
proceed.  Warning messages also report the source file name and line
number, but include the text @samp{warning:} to distinguish them
from error messages.
@end itemize

Warnings may indicate danger points where you should check to make sure
that your program really does what you intend; or the use of obsolete
features; or the use of nonstandard features of GNU C or C++.  Many
warnings are issued only if you ask for them, with one of the @option{-W}
options (for instance, @option{-Wall} requests a variety of useful
warnings).

@opindex pedantic
@opindex pedantic-errors
GCC always tries to compile your program if possible; it never
gratuitously rejects a program whose meaning is clear merely because
(for instance) it fails to conform to a standard.  In some cases,
however, the C and C++ standards specify that certain extensions are
forbidden, and a diagnostic @emph{must} be issued by a conforming
compiler.  The @option{-pedantic} option tells GCC to issue warnings in
such cases; @option{-pedantic-errors} says to make them errors instead.
This does not mean that @emph{all} non-ISO constructs get warnings
or errors.

@xref{Warning Options,,Options to Request or Suppress Warnings}, for
more detail on these and related command-line options.
