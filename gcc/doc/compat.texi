@c Copyright (C) 2002-2018 Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@node Compatibility
@chapter バイナリ互換性
@cindex binary compatibility
@cindex ABI
@cindex application binary interface

バイナリ互換性には、いくつかの関連する概念が含まれる。

@table @dfn
@item アプリケーションバイナリインタフェース (ABI)
コンパイラ、アセンブラ、リンカ、言語ランタイムのサポートを含む、プログラムのバイナリ表現を扱うすべてのツールが従う実行時規則のセット。 一部のABIは正式な仕様であり、おそらく複数の関係者によって設計されている。 他のものは、特定のツールセットによって実際に行われるものである。

@item ABI準拠
コンパイラは、そのABIによって列挙されたすべての仕様に従うコードを生成する場合、ABIに準拠する。 ライブラリは、ABIに従って実装されている場合、ABIに準拠する。 アプリケーションは、ABIに準拠するツールを使用して構築され、ABIによって指定された動作を具体的に変更するソースコードを含んでいない場合、ABIに準拠する。

@item 呼び出し規約
呼び出し規約は、引数がどのように引き渡され、関数の結果が返されるかを指定するABIのサブセットである。

@item 相互運用可能性
異なるツールセットは、同じプログラムで使用できるファイルを生成する場合、相互運用可能である。 ツールセットには、コンパイラ、アセンブラ、リンカ、ライブラリ、ヘッダファイル、スタートアップファイル、デバッガが含まれる。 異なるツールセットによって作成されたバイナリは、同じABIを実装しない限り相互運用できない。 これは、同じツールの異なるバージョンと、異なるベンダーのツールに適用される。

@item 相互呼び出し可能性
あるツールセットで構築されたバイナリの関数が、異なるツールセットで構築されたバイナリで関数を呼び出すことができるかどうかの相互運用性のサブセット。

@item 実装定義の機能
言語標準には、実装定義の機能のリストが含まれている。 これらの機能の一部は、通常、プラットフォームのABIによってカバーされ、他の機能はそうではない。 ABIでカバーされていない機能は、一般にプログラムの動作に影響するが、相互呼び出し可能性には影響しない。

@item 互換性
同じABIへの適合と実装定義の機能の同じ動作は、互換性にも関係する。
@end table

CまたはC++コンパイラによって実装されるアプリケーションバイナリインタフェースは、次のコード生成およびランタイムサポートに影響する。

@itemize @bullet
@item
データ型のサイズと配置
@item
構造体型のレイアウト
@item
呼び出し規約
@item
レジスタ使用規約
@item
ランタイム算術サポート用のインターフェース
@item
オブジェクトファイルフォーマット
@end itemize

さらに、C++コンパイラによって実装されるアプリケーションバイナリインタフェースは、次のコード生成およびランタイムサポートに影響する
@itemize @bullet
@item
名前のマングリング
@item
例外処理
@item
コンストラクタとデストラクタの呼び出し
@item
クラスのレイアウト、アラインメント、パディング
@item
仮想テーブルのレイアウトとアラインメント
@end itemize

一部のGCCコンパイルオプションによって、コンパイラはプラットフォームのデフォルトABIに準拠しないコードを生成する。 他のオプションは、ABIでカバーされていない実装定義の機能に対して異なるプログラム動作を引き起こす。 これらのオプションは、プラットフォームのデフォルトのABIに従わない他のコンパイラやプラットフォームの実装定義の機能の通常の動作との一貫性のために提供されている。 このようなオプションの使用には十分注意すること。

ほとんどのプラットフォームには、Cコードをカバーする明確なABIがあるが、C++機能をカバーするABIはまだ一般的ではない。

GCC 3.2以降、C++のGCCバイナリ規約は、64ビットItaniumに特化して設計された、ベンダーに依存しないC++ ABIをベースにしているが、どのプラットフォームにも適用される汎用仕様も含まれている。このC++ ABIは、一部のプラットフォーム、特にGNU/LinuxおよびBSDシステム上の他のコンパイラベンダーによって実装されている。 私たちは、将来のGCCリリースと互換性のある安定したABIを提供することに努めているが、これを困難にする問題が発生する可能性がある。 そのような問題には、異なるベンダーによるC++ ABIの異なる解釈、ABIのバグ、または異なるコンパイラにおけるABIの実装におけるバグが含まれる可能性がある。 GCCの@option{-Wabi}スイッチは、G++がおそらくC++ ABIと互換性のないコードを生成すると警告する。

C++コンパイラで使用されるC++ライブラリには、C++標準で定義された機能、言語ランタイムサポートを持つ標準C++ライブラリが含まれている。 ランタイムサポートはC++ ABIに含まれているが、標準C++ライブラリの正式なABIはない。 そのライブラリの2つの実装は、他のものの事実上のABIに従う場合、同じコンパイラでビルドされている場合、または同じC++コンパイラ用ABIおよびランタイムサポートに準拠するコンパイラであれば相互運用可能である。

G++と他のC++コンパイラが同じC++ ABIに準拠しているが、通常使用する標準C++ライブラリの実装が標準C++ライブラリの同じABIに従わない場合、それらのコンパイラで構築されたオブジェクトファイルは、同じC ++ライブラリを使用する場合に限り、同じプログラムで使用できる。これには、通常のライブラリが使用されていないコンパイラを呼び出すときに、C++ライブラリヘッダファイルの場所を指定する必要がある。GCCのC++ヘッダーファイルの場所は、GCCビルドの設定方法によって異なるが、G++の@option{-v}オプションを使用すると表示される。 G++3.3のデフォルトの設定オプションでは、別のC++コンパイラのコンパイル行に以下を含める必要がある。

@smallexample
    -I@var{gcc_install_directory}/include/c++/3.3
@end smallexample

同様に、G++でGNU C++ライブラリ以外のC ++ライブラリを使用する必要があるコードをコンパイルするには、他のライブラリのヘッダファイルの場所を指定する必要がある。

特定のC++ライブラリを使用するためにプログラムをリンクする最も簡単な方法は、C++ライブラリをデフォルトで指定するC++ドライバを使用することである。 たとえば、@command{g++}ドライバは、GCCのC++ライブラリ（@file{libstdc++}）と必要な他のライブラリとスタートアップファイルを適切な順序でどこに見つけるかをリンカに指示する。

プログラムで別のC++ライブラリを使用する必要があり、デフォルトでそのライブラリを使用するC++ドライバを使用して最終リンクを実行することができない場合、そのライブラリの場所と名前を@command{g++}に伝える必要がある。 異なるスタートアップファイルやその他のランタイムサポートライブラリを指定し、1つ以上のオプション@option{-nostdlib}, @option{-nostartfiles}, @option{-nodefaultlibs}を指定してGCCのサポートライブラリを使用しないようにする必要があるかもしれない。
