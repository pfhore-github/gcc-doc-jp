@c Copyright (C) 1988-2018 Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@node Objective-C
@comment  node-name,  next,  previous,  up

@chapter GNU Objective-Cの特徴

このドキュメントは、GNU Objective-Cの機能のいくつかを説明するためのものである。 Objective-Cを教えることを意図したものではない。 インターネット上には、その言語を提示するいくつかのリソースがある。

@menu
* GNU Objective-C runtime API::
* Executing code before main::
* Type encoding::
* Garbage Collection::
* Constant string objects::
* compatibility_alias::
* Exceptions::
* Synchronization::
* Fast enumeration::
* Messaging with the GNU Objective-C runtime::
@end menu

@c =========================================================================
@node GNU Objective-C runtime API
@section GNU Objective-C ランタイム API

この節は、GNU Objective-Cランタイムに特有のものである。 別のランタイムを使用している場合は、この節をスキップできる。

GNU Objective-Cランタイムは、Objective-Cランタイムシステムと対話し、実行時ランタイム構造を照会し、それらを操作することを可能にするAPIを提供する。 これにより、例えば、クラス、メソッド、プロトコルを検査してナビゲートすることができる。 新しいクラスや新しいメソッドを定義し、既存のクラスやプロトコルを変更することさえできる。

GNUstep-Baseのような 「Foundation」'ライブラリを使用している場合、このライブラリは多くの検査タスクを行う豊富な機能を提供する。おそらく、新しいクラスやメソッドを定義するには、GNU Objective-CランタイムAPIに直接アクセスするだけで済む。

@menu
* Modern GNU Objective-C runtime API::
* Traditional GNU Objective-C runtime API::
@end menu

@c =========================================================================
@node Modern GNU Objective-C runtime API
@subsection 新しいGNU Objective-CランタイムAPI

GNU Objective-Cランタイムは、「Objective-C 2.0」のApple/NeXT Objective-Cランタイムが提供するAPIに似たAPIを提供する。 APIは、GNU Objective-Cランタイムのパブリックヘッダファイルに記述されている。

@itemize @bullet

@item
@file{objc/objc.h}: これは基本的なObjective-Cヘッダファイルで、@code{id}、@code{Class}、@code{BOOL}のような基本的なObjective-Cの型を定義する。 Objective-Cにはほとんど何でもするためにこのヘッダーを含める必要がある。

@item
@file{objc/runtime.h}: このヘッダーは、Objective-Cランタイムデータ構造の検査と操作を可能にする、ほとんどのパブリックランタイムAPI関数を宣言している。 これらの関数は、Objective-Cランタイム間でかなり標準化されており、Apple/NeXT Objective-Cランタイムとほぼ同じである。 特殊な領域（メッセージの呼び出しの作成と転送、スレッド化）での関数は宣言されてなく、下の他のヘッダーにある。 @file{objc/runtime.h}で宣言されている@code{class_getName()}などの関数を使用するには、@file{objc/objc.h}と@file{objc/runtime.h}をインクルードする必要がある。

@item
@file{objc/message.h}: このヘッダーは、メッセージの呼び出しを構築、分解、転送するために使用されるパブリック関数を宣言する。 メッセージングは異なるランタイムで全く異なる方法で行われるため、このヘッダーの関数はGNU Objective-Cランタイム実装に固有である。

@item
@file{objc/objc-exception.h}: このヘッダーは、Objective-C例外に関連するいくつかのパブリック関数を宣言する。 たとえば、このヘッダーの関数を使用すると、単純なC/C ++コードからObjective-C例外をスローすることができる。

@item
@file{objc/objc-sync.h}: このヘッダーはObjective-C @code{@@synchronized()}構文に関連するいくつかのパブリック関数を宣言し、Objective-C @code{@@synchronized()}ブロックを単純なC/C++コードでエミュレートできる。

@item
@file{objc/thr.h}: このヘッダーは、GNU Objective-Cランタイムによってのみ提供されるパブリックランタイムAPIスレッディングレイヤを宣言する。 これは、@code{objc_mutex_lock()}のような関数を宣言する。これは、プラットフォームに依存しないスレッド関数のセットを提供する。

@end itemize

ヘッダーファイルには、GNU Objective-CランタイムAPIの各関数の詳細なドキュメントが含まれている。

@c =========================================================================
@node Traditional GNU Objective-C runtime API
@subsection 従来のGNU Objective-CランタイムAPI

GNU Objective-Cランタイムは、「従来の」GNU Objective-CランタイムAPIと呼ばれる異なるAPIを提供するために使用されていた。 このAPIに属する関数は、@code{class_getSuperclass()}（現代のAPI）の代わりに@code{class_get_super_class()}（従来のAPI）などの異なる命名規則を使用するため、認識しやすくなる。 このAPIを使用するソフトウェアには、宣言されている@file{objc/objc-api.h}ファイルが含まれている。

GCC 4.7.0以降、もはや従来のGNUランタイムAPIは利用できない。

@c =========================================================================
@node Executing code before main
@section @code{+load}: @code{main}の前に実行されるコード

この節は、GNU Objective-Cランタイムに特有のものである。 別のランタイムを使用している場合は、この節をスキップできる。

GNU Objective-Cランタイムは、プログラムの実行が@code{main}関数に入る前にコードを実行できる方法を提供する。 このコードは特別なクラスメソッド@code{+load}によって、クラスごとおよびカテゴリごとに実行される。

この機能は、最初にクラスにメッセージを送信することなく、プログラムが直接アクセスできるグローバル変数を初期化する場合に非常に便利である。@code{+initialize}メソッドがグローバル変数を初期化する通常の方法は、場合によっては遅すぎる可能性があるため、最初のメッセージがクラスオブジェクトに送られたときにのみ呼び出されるので便利ではないかもしれない。

たとえば、以下のように、@code{Stdin}、@code{Stdout}および@code{Stderr}をグローバル変数として宣言する@code{FileStream}クラスがあるとする。

@smallexample

FileStream *Stdin = nil;
FileStream *Stdout = nil;
FileStream *Stderr = nil;

@@implementation FileStream

+ (void)initialize
@{
    Stdin = [[FileStream new] initWithFd:0];
    Stdout = [[FileStream new] initWithFd:1];
    Stderr = [[FileStream new] initWithFd:2];
@}

/* @r{Other methods here} */
@@end

@end smallexample

この例では、@code{Stdin}、@code{Stdout}と@code{+initialize}の@code{Stderr}の初期化が遅すぎる。 プログラマは、変数が実際に初期化される前に、これらのオブジェクトの1つにメッセージを送信して、メッセージを@code{nil}オブジェクトに送ることができる。 グローバル変数を実際に初期化する@code{+initialize}メソッドは、最初のメッセージがクラスオブジェクトに送られるまで呼び出されない。 これらの変数は、@code{main}を入力する直前に初期化する必要がある。

上記の問題の正しい解決策は、@code{+initialize}の代わりに@code{+load}メソッドを使うことである：

@smallexample

@@implementation FileStream

+ (void)load
@{
    Stdin = [[FileStream new] initWithFd:0];
    Stdout = [[FileStream new] initWithFd:1];
    Stderr = [[FileStream new] initWithFd:2];
@}

/* @r{Other methods here} */
@@end

@end smallexample

@code {+ load}は、カテゴリによってオーバーライドされないメソッドである。 クラスとカテゴリの両方が@code{+load}を実装している場合、両方のメソッドが呼び出される。 これにより、カテゴリ内でいくつかの追加の初期化を実行できる。

このメカニズムは、@code{+initialize}の代わりになるものではない。@code{+initialize}の代わりにそれを使用することに決めたときの限界を知っておくべきある。

@menu
* What you can and what you cannot do in +load::
@end menu


@node What you can and what you cannot do in +load
@subsection @code{+load}でできることとできないこと

@code{+load}は最後の手段としてのみ使用される。 非常に早い時期に実行されるため、@code{+load}が実行されたとき、ほとんどのObjective-Cランタイム機械は準備ができていない。 したがって、@code{+load}はObjective-Cランタイムとは独立したCコードの実行に最適である。

GNUランタイムの@code{+load}実装は、あなたに次のことを保証する。

@itemize @bullet

@item
あなたは好きなCコードを書くことができる。

@item
クラスが同じファイルに実装されているオブジェクトにメッセージを割り当てて送信することができる。

@item
クラスのすべてのスーパークラスの@code{+load}実装は、そのクラスの@code{+load}が実行される前に実行される。

@item
クラスの@code{+load}実装は、どのカテゴリの@code{+load}実装よりも前に実行される。

@end itemize

特に、次のようなことは、たとえ特定のケースで動いたとしても、保証されていない。

@itemize @bullet

@item
任意のオブジェクトへのメッセージの割り当てまたは送信。

@item
同じファイルにカテゴリが実装されているオブジェクトへのメッセージの割り当てまたは送信。

@item
Objective-C定数文字列にメッセージを送る（@code{@@"これは定数文字列"}）。

@end itemize

クラスの@code{+load}を書くときに、兄弟クラスで@code{+load}を受け取ることについての仮定をするべきではない。 兄弟クラスが@code{+load}を受け取る順序は保証されない。

これが問題であれば、@code{+load}と@code{+initialize}が呼び出される順序が問題になる可能性がある。@code{+load}の中にオブジェクトを配置しなければ、@code{+load}が@code{+initialize}の前に呼び出されることが保証される。 @code{+load}の中にオブジェクトを作成すると、@code{+load}が呼び出されなくても、オブジェクトのクラスの@code{+initialize}メソッドが呼び出される。 クラスに対して@code{+load}を明示的に呼び出すと、@code{+initialize}が最初に呼び出される。 考えられる問題を回避するには、これらのメソッドのうちの1つだけを実装しようとすること。

@code{+load}メソッドは、バンドルが実行中のプログラムに動的にロードされるときにも呼び出される。 これは、あなたからの介入なしに自動的に行われる。 バンドルを作成し、@code{+load}を書く必要があるときは、クラスが実行中のプログラムにすでに存在するオブジェクトにメッセージを作成して安全に送信できる。 上記と同じ制限は、バンドルで定義されたクラスに適用される。



@node Type encoding
@section 型符号化

これは高度なセクションである。型の符号化は、コンパイラとランタイムによって広く使用されるが、Objective-Cを使用するためにそれらについて知る必要はない。

Objective-Cコンパイラは、すべての型の型エンコーディングを生成する。これらの型の符号化は、実行時にセレクタとメソッド、およびオブジェクトとクラスに関する情報を検索するために使用される。

型は次のように符号化される。

@c @sp 1

@multitable @columnfractions .25 .75
@item @code{_Bool}
@tab @code{B}
@item @code{char}
@tab @code{c}
@item @code{unsigned char}
@tab @code{C}
@item @code{short}
@tab @code{s}
@item @code{unsigned short}
@tab @code{S}
@item @code{int}
@tab @code{i}
@item @code{unsigned int}
@tab @code{I}
@item @code{long}
@tab @code{l}
@item @code{unsigned long}
@tab @code{L}
@item @code{long long}
@tab @code{q}
@item @code{unsigned long long}
@tab @code{Q}
@item @code{float}
@tab @code{f}
@item @code{double}
@tab @code{d}
@item @code{long double}
@tab @code{D}
@item @code{void}
@tab @code{v}
@item @code{id}
@tab @code{@@}
@item @code{Class}
@tab @code{#}
@item @code{SEL}
@tab @code{:}
@item @code{char*}
@tab @code{*}
@item @code{enum}
@tab @code {enum}はコンパイラが使用する整数型として正確に符号化される。これは列挙値に依存する。 多くの場合、コンパイラは@code{unsigned int}を使用する。これは@code{I}として符号化される。
@item 未知の型
@tab @code{?}
@item 複素数型
@tab @code{j}の後ろに内部型がある。 たとえば、@code{_Complex double}は "jd"として符号化される。
@item ビットフィールド
@tab @code{b}の後ろにビットフィールドの開始位置、ビットフィールドのタイプ、ビットフィールドのサイズ（ビットフィールドの符号化は、NeXTのコンパイラ符号化から変更された。以下を参照せよ）
@end multitable

@c @sp 1

ビットフィールドの符号化は、ビットフィールドがビットフィールドを含む型のサイズおよび整列を計算する実行時関数によって適切に処理されるように変更された。 前の符号化は、ビットフィールドのサイズのみを含んでいた。 この情報のみを使用した場合、ビットフィールドが占有するサイズを確実に計算することはできない。 Boehmのガベージコレクタが存在する場合、オブジェクトはこのコレクタで使用可能な型付きメモリファシリティを使用して割り当てられるため、これは非常に重要である。 型付きメモリ割り当てには、ポインタがオブジェクト内にある場所に関する情報が必要である。

ビットフィールド内の位置は、構造の先頭に最も近いビットの位置をビットでカウントしたものである。

非アトミック型は、次のように符号化される。

@c @sp 1

@multitable @columnfractions .2 .8
@item ポインタ
@tab @samp{^}の後ろに参照される型
@item 配列
@tab @samp {{}の後に配列の要素数、要素の型、@samp{]}が続く。
@item 構造体
@tab @samp{@{}の後ろに構造体の名前（構造体に名前がない場合は@samp{?}）、@samp{=}記号、メンバーの型、@samp{@}}が続く。
@item 共用体
@tab @samp{@(}の後ろに構造体の名前（共用体に名前がない場合は@samp{?}）、@samp{=}記号、メンバーの型、@samp{@))}が続く。
@item ベクタ
@tab @samp{!}の後ろにvector_size（ベクトルを構成するバイト数）、カンマ、ベクトルの整列（バイト単位）、要素の型、@samp{]}が続く。
@end multitable

i386マシン上のコンパイラによって生成される、いくつかの型とその符号化がここにある：

@sp 1

@multitable @columnfractions .60 .40
@item Objective-C型
@tab コンパイラ符号化
@item
@smallexample
int a[10];
@end smallexample
@tab @code{[10i]}
@item
@smallexample
struct @{
  int i;
  float f[3];
  int a:3;
  int b:2;
  char c;
@}
@end smallexample
@tab @code{@{?=i[3f]b128i3b131i2c@}}
@item
@smallexample
int a __attribute__ ((vector_size (16)));
@end smallexample
@tab @code{![16,16i]} (アラインメントは機種依存）
@end multitable

@sp 1

型に加えて、コンパイラは型指定子も符号化する。 以下の表は、現在のObjective-C型指定子の符号化について説明する。

@sp 1

@multitable @columnfractions .25 .75
@item Specifier
@tab Encoding
@item @code{const}
@tab @code{r}
@item @code{in}
@tab @code{n}
@item @code{inout}
@tab @code{N}
@item @code{out}
@tab @code{o}
@item @code{bycopy}
@tab @code{O}
@item @code{byref}
@tab @code{R}
@item @code{oneway}
@tab @code{V}
@end multitable

@sp 1

型指定子は、型の直前に符号化される。 しかし型とは異なり、型指定子はメソッド引数型に現れるときにのみ符号化される。

@code{const}がポインタとやり取りする方法に注意せよ：

@sp 1

@multitable @columnfractions .25 .75
@item Objective-C型
@tab コンパイラ符号化
@item
@smallexample
const int
@end smallexample
@tab @code{ri}
@item
@smallexample
const int*
@end smallexample
@tab @code{^ri}
@item
@smallexample
int *const
@end smallexample
@tab @code{r^i}
@end multitable

@sp 1

@code{const int *}は@code {const int}へのポインタなので、@code{^ri}として符号化される。 一方、@code{int * const}は、@code {int}への@code{const}ポインタであり、したがって@code{r^i}として符号化される。

最後に、@code{const char *}と@code{char * const}を符号化するときに複雑なことがある。 @code{char *}は@code{^c}ではなく@code{*}として符号化されているので、@code{r}がポインターまたはポインタ対象に適用されるという事実を表現する方法はない。

したがって、@code{r*}は@code{const char *}を意味するという慣例として仮定されていて（それは最もよく使われるものである）、@code{char * const}を符号化する方法はない。 @code{char * const}は単に@code{*}として符号化され、@code{const}は失われる。

@menu
* Legacy type encoding::
* @@encode::
* Method signatures::
@end menu

@node Legacy type encoding
@subsection 古い型符号化

残念ながら、歴史的にGCCはコードのコードにいくつかのバグを持っていた。 NeXTランタイムは、GCCがこの歴史的フォーマット（GCC-3.3と互換性がある）で型符号化を生成することを期待する。そのため、NeXTランタイムを使用する場合、GCCは誤ったエンコーディングをいくつか導入する。

@itemize @bullet

@item
ポイントされるものの読み取り専用修飾子は '^'の前に出される。typedefでない限り、ポインタ自体の読み取り専用修飾子は無視される。 また、 'r'は最も外側の型に対してのみ送出される。

@item
32ビット長は 'l'または 'L'としてエンコードされるが、必ずしもそうではない。 typedefの場合、structフィールドまたはポインタを符号化する場合、コンパイラは代わりに 'i'または 'I'を使用する。

@item
実際には符号なしかlongであっても、@code{enum}は常に 'i'（int）として符号化される。

@end itemize
それに加えて、NeXTランタイムは、ビットフィールドに異なる符号化を使用する。 ビットオフセットや基になるフィールドタイプを使わずに、それらを@code{b}の後にサイズで符号化する。

@node @@encode
@subsection @code{@@encode}

GNU Objective-Cは、C/Objective-C型から型の符号化を作成できる@code{@@encode}構文をサポートしている。 たとえば、@code{@@encode(int)}は、コンパイラによって@code{"i"}にコンパイルされる。

@code{@@encode}は@code{const}以外の型修飾子をサポートしていない。 たとえば、@code {@@encode(const char *)}は有効で、@code{"r*"}へとコンパイルされるが、@code{@@encode(bycopy char *)}は無効でコンパイル エラーの原因となる。

@node Method signatures
@subsection メソッドシグネチャ

この節では、Objective-Cを使用するにはめったに必要にならないメソッド型の符号化について説明する。最初に読むときにはここを飛ばすべきである。ランタイムはメソッド上で動作する関数を提供し、パラメータのリストを辿って解釈することができる。 これらの関数はパブリック「API」の一部であり、ユーザコードからのメソッドシグネチャと対話するための好ましい方法である。

しかし、メソッドのシグネチャの問題をデバッグし、メソッドシグネチャの実装方法（つまり、 「ABI」）を知る必要がある場合は、読むこと。

メソッドは、「シグネチャ」が符号化され、実行時に利用可能になる。「シグネチャ」は、実行時にメソッドの呼び出しを動的に構築するのに必要なすべての情報、つまり戻り値の型と引数を符号化する。

「シグネチャ」はヌルで終了する文字列で、次の要素で構成される：

@itemize @bullet

@item
型修飾子を含む戻り型。 たとえば、@code{int}を返すメソッドはここに@code{i}を持つ。

@item
すべてのパラメータを渡すために必要な合計サイズ（バイト単位）。 これには2つの隠しパラメータ（オブジェクト@code{self}とメソッドセレクタ@code{_cmd}）が含まれる。

@item
それぞれの引数は、型の符号化の後に、パラメータのリスト内の引数のオフセット（バイト単位）が続く。

@end itemize
たとえば、ポインタのサイズが4の場合、引数を持たずに@code{int}を返すメソッドは、@code{i8@@0:4}のシグネチャを持つ。このシグネチャは、次のように解釈される。@code{i }は戻り値の型（@code{int}）、@code{8}はバイト単位のパラメータの合計サイズ（サイズがそれぞれ2つのポインタ）、@code{@@ 0}は最初のパラメータ （バイトオフセット@code{0}のオブジェクト）、@code{:4}は2番目のパラメータ（バイトオフセット@code{4}の@code{SEL}）である。

GCCでコンパイルされたObjective-Cオブジェクトファイルで"strings"プログラムを実行すると、より多くの例を簡単に見つけることができる。@code{i8@@0:4}と非常によく似た文字列が多数表示される。 それらはObjective-Cメソッドのシグネチャである。


@node Garbage Collection
@section ガベージコレクション

この節は、GNU Objective-Cランタイムに特有のものである。 別のランタイムを使用している場合は、この節をスキップできる。

Boehm-Demers-Weiserの保守的なガベージコレクタと呼ばれる強力な保守的ガベージコレクタを使用することにより、GNUランタイムによるガベージコレクションのサポートが追加された。

サポートを有効にするには、@w{@option{-enable-objc-gc}}という追加の引数を使用してコンパイラを設定する必要がある。 これにより、boehm-gcライブラリが構築され、ガベージコレクタをサポートするためのいくつかの拡張機能を備えた追加のランタイムライブラリが構築される。 新しいライブラリには、ガベージコレクションされていないライブラリと競合しないように新しい名前@file{libobjc_gc.a}を持つ。

ガベージコレクタが使用されるとき、オブジェクトは、Boehm-Demers-Weiserコレクタで利用可能ないわゆる型付きメモリ割り当てメカニズムを使用して割り当てられる。 このモードでは、ポインタがオブジェクト内のどこにあるかについての正確な情報が必要である。この情報は、クラスが初期化された直後にクラスごとに1回計算される。

@code{class_ivar_set_gcinvisible()}という新しいランタイム関数があり、これはいわゆる@dfn{弱ポインタ}の参照を宣言するために使用できる。 そのようなポインタは、基本的にガベージコレクタでは隠されている。 特定の状況で、特に割り当てられたオブジェクトを追跡し、収集できるようにする場合に便利である。 この種のポインタはオブジェクトのメンバーにしかなり得まない。グローバルポインタを弱い参照として宣言することはできない。 ポインタ型のすべての型は、@code{id}、@code{Class}、@code{SEL}を含む弱ポインタとして宣言できる。

この機能の使用例を次に示す。 弱ポインタ参照を保持するインスタンスを持つクラスを実装したいとする。 次のクラスはこれを行う：

@smallexample

@@interface WeakPointer : Object
@{
    const void* weakPointer;
@}

- initWithPointer:(const void*)p;
- (const void*)weakPointer;
@@end


@@implementation WeakPointer

+ (void)initialize
@{
  if (self == objc_lookUpClass ("WeakPointer"))
    class_ivar_set_gcinvisible (self, "weakPointer", YES);
@}

- initWithPointer:(const void*)p
@{
  weakPointer = p;
  return self;
@}

- (const void*)weakPointer
@{
  return weakPointer;
@}

@@end

@end smallexample

弱いポインタは、@samp {!}文字で表される新しい型の文字指定子でサポートされている。 @code{class_ivar_set_gcinvisible()}関数は、この指定子を引数として指定されたインスタンス変数の文字列型の記述に追加または削除する。

@c =========================================================================
@node Constant string objects
@section 定数文字列オブジェクト

GNU Objective-Cは、コンパイラによって直接生成される定数文字列オブジェクトを提供する。 文字定数@samp{@@}をCの定数文字列の前に付けて、定数文字列オブジェクトを宣言する。

@smallexample
  id myString = @@"this is a constant string object";
@end smallexample

定数文字列オブジェクトは、GNU Objective-Cランタイムによって提供される@code{NXConstantString}クラスのデフォルトインスタンスである。 このクラスの定義を取得するには、@file{objc/NXConstStr.h}ヘッダーファイルを含める必要がある。

ユーザー定義ライブラリは、独自の定数文字列クラスを実装したい場合がある。 それらをサポートするために、GNU Objective-Cコンパイラは新しいコマンドラインオプション@option{-fconstant-string-class=@var{class-name}}を提供する。 提供されるクラスは、@code{NXConstantString}の構造と同じ厳密な構造に従うべきである：

@smallexample

@@interface MyConstantStringClass
@{
  Class isa;
  char *c_string;
  unsigned int len;
@}
@@end

@end smallexample

@code{NXConstantString}は@code{Object}から継承する。 ユーザークラスライブラリは、カスタマイズされた定数文字列クラスを@code{Object}とは異なるクラスから継承することを選択することができる。 定数文字列クラスが実装しなければならないメソッドには要件はないが、クラスの最終的なivarレイアウトは指定された構造と互換性がなければならない。

コンパイラが静的に割り当てられた定数文字列オブジェクトを作成すると、@code{c_string}フィールドはコンパイラによって文字列で埋められる。 @code{length}フィールドはコンパイラによって文字列長で埋められる。 @code{isa}ポインタはコンパイラによって@code{NULL}で埋められ、後で実行時にGNU Objective-Cランタイムライブラリによって自動的に修正され、オブジェクトファイルのロード時に@option {-fconstant-string-class}オプションで設定されたクラスを指すようになる（シーンの裏でどのように動作するのか知りたいと思うなら、使用するクラスの名前、修正する静的オブジェクトのリストは、コンパイラによってGNUランタイムライブラリが実行時にそれらを見つける場所のオブジェクトファイルに格納される。）

その結果、ファイルが@option{-fconstant-string-class}オプションでコンパイルされると、すべての定数文字列オブジェクトはこのオプションの引数として指定されたクラスのインスタンスになる。 さまざまな定数文字列クラスを参照する複数のコンパイル単位を持つことは可能だが、コンパイラやリンカーはこれを行う際に制限を課さない。

@c =========================================================================
@node compatibility_alias
@section @code{compatibility_alias}

キーワード@code{@@compatibility_alias}を使用すると、クラス名を別のクラス名と同等に定義できる。 例えば：

@smallexample
@@compatibility_alias WOApplication GSWApplication;
@end smallexample

は、クラス名として@code{WOApplication}が出現するたびに、それを@code{GSWApplication}に置き換える必要があることをコンパイラーに伝える。（つまり、@code{WOApplication}は@code{GSWApplication}のエイリアスである。）

これをどのように使用するかにはいくつかの制約がある---

@itemize @bullet

@item @code{WOApplication} (エイリアス)は既存クラスであってはならない

@item @code{GSWApplication} (本物のクラス)は既存クラスでなければならない

@end itemize

@c =========================================================================
@node Exceptions
@section 例外

GNU Objective-Cは、次の例のように、言語に組み込まれた例外サポートを提供する。

@smallexample
  @@try @{
    @dots{}
       @@throw expr;
    @dots{}
  @}
  @@catch (AnObjCClass *exc) @{
    @dots{}
      @@throw expr;
    @dots{}
      @@throw;
    @dots{}
  @}
  @@catch (AnotherClass *exc) @{
    @dots{}
  @}
  @@catch (id allOthers) @{
    @dots{}
  @}
  @@finally @{
    @dots{}
      @@throw expr;
    @dots{}
  @}
@end smallexample

@code{@@throw}文は、Objective-CまたはObjective-C++プログラムのどこにでも置くことができる。 @code{@@catch}ブロックの内部で使用される場合、（上記のように）@code{@@throw}は引数なしで現れることができ、@code{@@catch}で捕捉されたオブジェクトは再送出される。

このスキームを使用してObjective-Cオブジェクト（のポインタ）のみがスローされ捕捉されることに注意せよ。 オブジェクトがスローされると、C++やJavaで@code{catch}ブロックが動作するやり方と同様に、その型のオブジェクトを扱うことができる最も近い@code{@@catch}節でキャッチされる。 以前の@code{@@ catch}節（もしあれば）によって捕捉されなかったすべてのObjective-C例外をキャッチするために、@code{@@catch(id @dots {})}節を使うことができる。 

@code{@@finally}句が存在する場合、その直前の@code{@@try @dots{} @@catch}セクションから終了時に実行される。 これは、Javaの@code{finally}節の動作と同様に、@code{@@try @dots{} @@catch}セクション内に例外がスローされ、キャッチされ、再スローされるかどうかにかかわらず発生する。

新しい例外メカニズムの使用にはいくつかの注意点がある。

@itemize @bullet
@item
例外を使用するObjective-Cファイルをコンパイルするときは、@option{-fobjc-exceptions}コマンドラインオプションを使用する必要がある。

@item
GNUランタイムでは、例外は常に「ネイティブ」例外として実装される。リンク時には、@option{-fexceptions}オプションと@option{-shared-libgcc}オプションを使用することを推奨する。

@item
NeXTランタイムでは、現在のところ、@code{NSException}クラスによって提供される@code{NS_HANDLER}スタイルのイディオムとバイナリ互換に設計されているが、新しい例外はMac OS X 10.3（Panther）以降のシステムでのみ使用できる。 NeXT Objective-Cランタイムで必要とされる追加機能が原因である。

@item
前述のように、新しい例外はObjective-C以外のオブジェクトの処理をサポートしていない。 さらに、Objective-C++から使用される場合、Objective-C例外モデルは現時点でC++例外と相互運用されない。 つまり、Objective-Cからの例外を@code{@@throw}して、C++で@code{catch}する、およびその逆(すなわち、 @code{throw @dots{} @@catch})はできない。
@end itemize

@c =========================================================================
@node Synchronization
@section 同期

GNU Objective-Cは同期ブロックをサポートしている：

@smallexample
  @@synchronized (ObjCClass *guard) @{
    @dots{}
  @}
@end smallexample

@code{@@synchronized}ブロックに入ると、実行スレッドは、最初にロックが対応する@code{guard}オブジェクトに別のスレッドによって置かれているかどうかをチェックする。 もしあれば、現在のスレッドは、他のスレッドがそのロックを放棄するまで待つ。 @code{guard}が利用可能になると、現在のスレッドはそれ自身のロックを行い、@code{@@ synchronized}ブロックに含まれるコードを実行し、最後にロックを解放する（それによって@code {guard}を他のスレッドが利用できるようにする）。

Javaとは異なり、Objective-Cはメソッド全体を@code{@@synchronized}とマークすることはできない。 @code{@@synchronized}ブロックから例外を投げることが許可されていて、ガードオブジェクトのロックが適切に解除される。

同期と例外処理の間の相互作用のために、例外を有効にしてコンパイルする場合、つまりコマンドラインオプション@option{-fobjc-exceptions}を使用してコンパイルする場合にのみ@code{@@synchronized}を使用できる。


@c =========================================================================
@node Fast enumeration
@section 高速列挙

@menu
* Using fast enumeration::
* c99-like fast enumeration syntax::
* Fast enumeration details::
* Fast enumeration protocol::
@end menu

@c ================================
@node Using fast enumeration
@subsection 高速列挙の使用

GNU Objective-Cは、高速列挙構文をサポートしている：

@smallexample
  id array = @dots{};
  id object;

  for (object in array)
  @{
    /* Do something with 'object' */
  @}
@end smallexample

@code array}は「高速列挙プロトコル」（下記参照）を実装するObjective-Cオブジェクト（通常は配列、辞書、セットなどのコレクションオブジェクト）である必要がある。 GNUstep BaseやApple Cocoa FoundationなどのFoundationライブラリを使用している場合は、ライブラリ内のすべてのコレクションオブジェクトがこのプロトコルを実装し、このように使用できる。

上のコードは@code{array}のすべてのオブジェクトを繰り返し処理する。 それぞれに対して、それを@code{object}に代入し、次に@code{something with 'object'}ステートメントを実行する。

以下は、Foundationライブラリ（@code{NSArray}、@code{NSString}、@code{NSLog}の実装を提供する）を使用した完全に実践された例である：

@smallexample
  NSArray *array = [NSArray arrayWithObjects: @@"1", @@"2", @@"3", nil];
  NSString *object;

  for (object in array)
    NSLog (@@"Iterating over %@@", object);
@end smallexample


@c ================================
@node c99-like fast enumeration syntax
@subsection C99風の高速列挙構文

c99のような宣言構文も使用できる。

@smallexample
  id array = @dots{};

  for (id object in array)
  @{
    /* Do something with 'object'  */
  @}
@end smallexample

これは完全に次のものと同等であるが、

@smallexample
  id array = @dots{};

  @{
    id object;
    for (object in array)
    @{
      /* Do something with 'object'  */
    @}
  @}
@end smallexample

いくつかの入力を省くことができる。

Objective-Cでこの構文を許可するには、オプション@option{-std = c99}は不要であることに注意。

@c ================================
@node Fast enumeration details
@subsection 高速列挙の詳細

ここでは、より詳細な技術的な説明がある。このコードを考える

@smallexample
  for (@var{object expression} in @var{collection expression})
  @{
    @var{statements}
  @}
@end smallexample

ここでそれを実行するときに起こるものである：

@itemize @bullet
@item
@code{@var{collection expression}}は正確に1回評価され、結果は反復処理のコレクションオブジェクトとして使用される。 つまり、@code{for (object in [NSDictionary keyEnumerator]) @dots{}}などのコードを記述することは安全である。

@item
反復は、高速列挙プロトコル（下記参照）を使用してコレクションオブジェクトからオブジェクトのバッチを繰り返し取得した後、バッチ内のすべてのオブジェクトを反復処理することによってコンパイラによって実装される。 これは、オブジェクトが1つずつ検索される通常の列挙型よりも高速である（したがって、名前は「高速列挙」）。

@item
コレクションにオブジェクトがない場合、@code{@var{object expression}}は@code {nil}に設定され、ループはただちに終了する。

@item
コレクション内にオブジェクトがある場合、コレクション内の各オブジェクト（返された順序）で@code{@var{object expression}}がオブジェクトに設定され、次に@code{@var{statements}}が実行される。

@item
@code{@var{statements}}には、@code{break}コマンドと@code{continue}コマンドを含めることができる。これにより、繰り返しを中断したり、次のループの繰り返しにスキップしたりできる。

@item
繰り返し処理するオブジェクトがなくなるため反復が終了すると、@code{@var{object expression}}は@code {nil}に設定される。 これにより、@code{break}コマンドが使用されたため（その場合は@code{@var{object expression}}は、反復処理された最後のオブジェクトに設定されたままである。）に反復が終了したか、すべてのオブジェクトを反復したが （この場合は@code{@var{object expression}}は@code {nil}に設定される）どうかを判断できる。

@item
@code{@var{statements}}はコレクションオブジェクトを変更してはならない。 もしそうであれば、それは深刻なエラーであり、高速列挙は@code{objc_enumerationMutation}を呼び出すことによって終了する。これは、通常はプログラムを強制終了するが、Foundationライブラリが@code{objc_set_mutation_handler}を介して、例えば例外を生じるようにカスタマイズすることができる。

@end itemize

@c ================================
@node Fast enumeration protocol
@subsection 高速列挙プロトコル

独自のコレクションオブジェクトを高速列挙で使用できるようにするには、以下のメソッドを実装する必要がある

@smallexample
- (unsigned long) countByEnumeratingWithState: (NSFastEnumerationState *)state
                                      objects: (id *)objects
                                        count: (unsigned long)len;
@end smallexample

ここで@code{NSFastEnumerationState}は以下のようにコード内で定義されていなくてはならない

@smallexample
typedef struct
@{
  unsigned long state;
  id            *itemsPtr;
  unsigned long *mutationsPtr;
  unsigned long extra[5];
@} NSFastEnumerationState;
@end smallexample

コードに@code {NSFastEnumerationState}が定義されていない場合、コンパイラは自動的に@code{NSFastEnumerationState *}を@code{struct __objcFastEnumerationState *}に置き換える。この型はコンパイラによって同じ方法で静かに定義される。 これは混乱する可能性がある。代わりに@code{NSFastEnumerationState}を定義することを推奨する（上を参照）。

このメソッドは、オブジェクトのバッチを取得するための高速列挙中に繰り返し呼び出される。 メソッドの各呼び出しは、オブジェクトの次のバッチを取得する必要がある。

メソッドの戻り値は、現在のバッチ内のオブジェクトの数である。 これは、呼び出し側が要求したバッチの最大サイズである@code{len}を超えてはならない。 バッチ自体は、@code{NSFastEnumerationState}構造体の@code{itemsPtr}フィールドに返される。

オブジェクトを返すのを助けるために、@code{objects}配列は、@code{len}というサイズの呼び出し側が（スタック上に）あらかじめ割り当てたC配列である。 多くの場合、返すオブジェクトをその@code{objects}配列に配置してから、@code{itemsPtr = objects}とすることができる。 しかし、その必要はない。 コレクションに既にC配列の何らかの形で返すオブジェクトがある場合、代わりにそこから戻すことができる。

@code{NSFastEnumerationState}構造体の@code{state}フィールドと@code{extra}フィールドは、コレクションオブジェクトが列挙の状態を追跡できるようにする。 単純な配列の実装では、@code{state}は最後に返されたオブジェクトのインデックスを追跡し、@code{extra}は使用されないかもしれない。

@code{NSFastEnumerationState}の@code{mutationsPtr}フィールドは、書き換えを追跡するために使用される。 それは数字を指すべきである。 各オブジェクトを処理する前に、高速列挙ループはこの番号が変更されていないことを確認する。 それがあれば、書き換えが起こり、高速列挙が中止される。 したがって、@code{mutationsPtr}はコレクションのバージョン番号を指すように設定することができる。オブジェクトの追加や削除などの変更があるたびに1ずつ増加する。 あるいは、厳密な書き換えチェックをしていないコンテンツの場合は、コレクション内のオブジェクトの数、またはコレクションが書き換えをしていないことを確認するためにチェックできる他の値を指すことができる。

最後に、@code{len}引数と戻り値の型を@code {unsigned long}と宣言したことに注意せよ。 それらは@code{unsigned int}型であると宣言することもできるが、それでもすべてが動作する。

@c =========================================================================
@node Messaging with the GNU Objective-C runtime
@section GNU Objective-C ランタイムでのメッセージング

この節は、GNU Objective-Cランタイムに特有のものである。 別のランタイムを使用している場合は、この節をスキップできる。

GNU Objective-Cランタイムでのメッセージングの実装は移植性が高く設計されており、標準Cに基づいている。

GNU Objective-Cランタイムでのメッセージの送信は、2つのステップから構成されている。 まず、ルックアップ関数@code{objc_msg_lookup()}（superへのメッセージの場合は@code{objc_msg_lookup_super()}）を呼び出す。 この実行時関数は、呼び出されるメソッドの受信側とセレクタを引数として取る。 メソッドを実装している関数へのポインタである@code{IMP}を返す。 メソッド呼び出しの2番目のステップは、このポインタ関数を適切な関数ポインタ型にキャストし、正しい引数で指された関数を呼び出すことである。

たとえば、コンパイラが@code{[object init]}のようなメソッド呼び出しを検出すると、コンパイラはそれをコンパイルして@code{objc_msg_lookup(object, @@selector(init))} 値を適切な関数ポインタ型に変換し、それを呼び出す。

@menu
* Dynamically registering methods::
* Forwarding hook::
@end menu

@c =========================================================================
@node Dynamically registering methods
@subsection 動的に登録されたメソッド

受信側が必要なメソッドを実装していないため、@code{objc_msg_lookup()}が適切なメソッド実装を見つけられない場合、クラスがメソッドを動的に登録できるかどうかを確認しようとする。

そうするために、ランタイムは、レシーバの以下のクラスがメソッドを実装しているかどうかをチェックする。

@smallexample
+ (BOOL) resolveInstanceMethod: (SEL)selector;
@end smallexample

これはインスタンスメソッドの場合で

@smallexample
+ (BOOL) resolveClassMethod: (SEL)selector;
@end smallexample

これはクラスメソッドの場合である。クラスがそれを実装すると、ランタイムはそれを呼び出し、元のメソッドのセレクタを引数として渡し、@code{YES}を返す場合、ランタイムは再度参照を試み、一致したメソッドが@code{+resolveInstanceMethod:}または@code{+resolveClassMethod:}によって動的に加えられるなら成功する可能性がある。

This allows classes to dynamically register methods (by adding them to
the class using @code{class_addMethod}) when they are first called.
To do so, a class should implement @code{+resolveInstanceMethod:} (or,
depending on the case, @code{+resolveClassMethod:}) and have it
recognize the selectors of methods that can be registered dynamically
at runtime, register them, and return @code{YES}.  It should return
@code{NO} for methods that it does not dynamically registered at
runtime.

If @code{+resolveInstanceMethod:} (or @code{+resolveClassMethod:}) is
not implemented or returns @code{NO}, the runtime then tries the
forwarding hook.

Support for @code{+resolveInstanceMethod:} and
@code{resolveClassMethod:} was added to the GNU Objective-C runtime in
GCC version 4.6.

@c =========================================================================
@node Forwarding hook
@subsection Forwarding Hook

The GNU Objective-C runtime provides a hook, called
@code{__objc_msg_forward2}, which is called by
@code{objc_msg_lookup()} when it cannot find a method implementation in
the runtime tables and after calling @code{+resolveInstanceMethod:}
and @code{+resolveClassMethod:} has been attempted and did not succeed
in dynamically registering the method.

To configure the hook, you set the global variable
@code{__objc_msg_forward2} to a function with the same argument and
return types of @code{objc_msg_lookup()}.  When
@code{objc_msg_lookup()} can not find a method implementation, it
invokes the hook function you provided to get a method implementation
to return.  So, in practice @code{__objc_msg_forward2} allows you to
extend @code{objc_msg_lookup()} by adding some custom code that is
called to do a further lookup when no standard method implementation
can be found using the normal lookup.

This hook is generally reserved for ``Foundation'' libraries such as
GNUstep Base, which use it to implement their high-level method
forwarding API, typically based around the @code{forwardInvocation:}
method.  So, unless you are implementing your own ``Foundation''
library, you should not set this hook.

In a typical forwarding implementation, the @code{__objc_msg_forward2}
hook function determines the argument and return type of the method
that is being looked up, and then creates a function that takes these
arguments and has that return type, and returns it to the caller.
Creating this function is non-trivial and is typically performed using
a dedicated library such as @code{libffi}.

The forwarding method implementation thus created is returned by
@code{objc_msg_lookup()} and is executed as if it was a normal method
implementation.  When the forwarding method implementation is called,
it is usually expected to pack all arguments into some sort of object
(typically, an @code{NSInvocation} in a ``Foundation'' library), and
hand it over to the programmer (@code{forwardInvocation:}) who is then
allowed to manipulate the method invocation using a high-level API
provided by the ``Foundation'' library.  For example, the programmer
may want to examine the method invocation arguments and name and
potentially change them before forwarding the method invocation to one
or more local objects (@code{performInvocation:}) or even to remote
objects (by using Distributed Objects or some other mechanism).  When
all this completes, the return value is passed back and must be
returned correctly to the original caller.

Note that the GNU Objective-C runtime currently provides no support
for method forwarding or method invocations other than the
@code{__objc_msg_forward2} hook.

If the forwarding hook does not exist or returns @code{NULL}, the
runtime currently attempts forwarding using an older, deprecated API,
and if that fails, it aborts the program.  In future versions of the
GNU Objective-C runtime, the runtime will immediately abort.
