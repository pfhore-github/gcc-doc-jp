@c Copyright (C) 1988-2020 Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@node Bugs
@chapter バグの報告
@cindex bugs
@cindex reporting bugs

あなたのバグレポートは、GCCを信頼できるものにするために不可欠な役割を果たす。

問題が発生したときには、まずそれが既知かどうかを確認することである。 @xref{Trouble}。 それが未知の場合は、問題を報告する必要がある。

@menu
* Criteria:  バグの基準。本当にバグを見つけたのか？
* Reporting: バグの報告。バグを効果的に報告する方法。
@end menu

@node Bug Criteria
@section バグを見つけたのか？
@cindex bug criteria

あなたがバグを見つけたかどうか分からない場合は、いくつかのガイドラインがある：

@itemize @bullet
@cindex fatal signal
@cindex core dump
@item
コンパイラが致命的なシグナルを受け取った場合、どのような入力に対しても、それはコンパイラのバグである。 信頼性の高いコンパイラは決してクラッシュしない。

@cindex invalid assembly code
@cindex assembly code, invalid
@item
コンパイラが無効なアセンブリコードを生成した場合（@code{asm}文を除く）、通常は（警告だけでなく）アセンブラの実行を妨げるエラーをコンパイラが報告しない限り、コンパイラのバグである。

@cindex undefined behavior
@cindex undefined function value
@cindex increment operators
@item
コンパイラが入力ソースコードを正しく実行しない有効なアセンブリコードを生成すると、それはコンパイラのバグである。

ただし、別のCまたはC++コンパイラで希望の結果を得るために、偶然に起こった、動作が未定義のプログラムがある可能性があるため、再確認する必要がある。

例えば、多くの非最適化コンパイラでは、@samp{return x;}の代わりに関数の最後に@samp{x;}を書くことができる。 しかし、@code{return}を省略すると、関数の値は未定義である。 GCCが異なる結果を出すときはバグではない。

問題は、@code{f(*p++、*p++)}のように2つのインクリメント演算子を使用した式に起因することがよくある。 以前のコンパイラは、あなたが意図した方法でその式を解釈しているかもしれない。 GCCはそれを別の方法で解釈するかもしれない。 どちらのコンパイラも間違っていない。 バグはあなたのコードにある。

エラーを単一のソース行にローカライズした後で、これらのことを確認するのは簡単である。 プログラムが正しく定義されていれば、コンパイラのバグが見つかったことになる。

@item
コンパイラが有効な入力に対してエラーメッセージを出すと、これはコンパイラのバグである。

@cindex invalid input
@item
コンパイラが無効な入力に対してエラーメッセージを生成しない場合、これはコンパイラのバグである。 しかし、あなたは「無効な入力」という考え方は、他の人の「拡張」や「伝統的な実態のサポート」の考え方かもしれないことに注意せよ。

@item
あなたがGCCがサポートしている言語の経験豊富なユーザーならば、どんな場合でもGCCの改善提案は歓迎される。
@end itemize

@node Bug Reporting
@section How and Where to Report Bugs
@cindex compiler bugs, reporting

バグは@value{BUGURL}でのバグデータベースで報告されるべきである。
