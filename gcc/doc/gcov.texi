@c Copyright (C) 1996-2018 Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@ignore
@c man begin COPYRIGHT
Copyright @copyright{} 1996-2018 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the gfdl(7) man page.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
@c man end
@c Set file name and title for the man page.
@setfilename gcov
@settitle coverage testing tool
@end ignore

@node Gcov
@chapter @command{gcov}---テストカバレッジプログラム

@command{gcov}は、あなたのプログラムでコードカバレッジをテストするためにGCCと併用できるツールである。

@menu
* Gcov Intro::                  gcovへの導入
* Invoking Gcov::               gcovの使い方
* Gcov and Optimization::       GCC最適化にgcovを使う
* Gcov Data Files::             gcovによって使われるファイル
* Cross-profiling::             データファイルの再配置
@end menu

@node Gcov Intro
@section @command{gcov}への導入
@c man begin DESCRIPTION

@command{gcov}はテストカバレッジプログラムである。GCCと連携してプログラムを分析し、より効率的で高速な実行コードを作成し、未テストのプログラム部分を発見するのに役立つ。 @command{gcov}をプロファイリングツールとして使用すると、最適化作業がコードにどのような影響を与えるかを知ることができる。 他のプロファイリングツール@command{gprof}とともに@command{gcov}を使用して、コードのどの部分が最大の計算時間を使用しているかを評価することもできる。

プロファイリングツールは、コードのパフォーマンスを分析するのに役立つ。 @command{gcov}や@command{gprof}などのプロファイラを使用すると、次のような基本的なパフォーマンス統計を見つけることができる。

@itemize @bullet
@item
各行のコード実行頻度

@item
実際にどの行のコードが実行されるか

@item
コードの各セクションが使用する計算時間
@end itemize

コンパイル時にコードがどのように動作するかを知ったら、各モジュールを調べてどのモジュールを最適化するかを確認できる。 @command{gcov}は、最適化を行う場所を決定するのに役立つ。

ソフトウェア開発者は、テストスイートと連携してカバレッジテストを行い、ソフトウェアが実際にリリースに適していることを確認する。 テストスーツは、プログラムが期待どおりに動作することを確認できる。 カバレッジ・プログラムは、プログラムのどれがテストスイートによって行使されているかを調べるためのテストである。 開発者は、より良いテストとより良い最終製品を作成するために、どのような種類のテストケースをテストスイートに追加する必要があるかを判断できる。

@command{gcov}を使うつもりなら、最適化せずにコードをコンパイルすること。なぜなら、最適化は、コード行を一つの関数にまとめることがあり、コードが大量のコンピュータ時間を使用する「ホットスポット」を探す必要がのに十分な情報を与えないかもしれないからである。 同様に、（最低解像度で）@command{gcov}は行ごとに統計を累積するため、各行に1つのステートメントだけを置くプログラミングスタイルで最も効果的である。 ループやその他の制御構造に拡張する複雑なマクロを使用すると、統計はそれほど有用ではない---マクロ呼び出しが表示される行だけを報告する。 複雑なマクロが関数のように振る舞う場合、それらをインライン関数に置き換えてこの問題を解決することができる。

@command{gcov}は@file{@var{sourcefile}.gcov}というログファイルを作成する。これはソースファイル@file{@var{sourcefile} .c}の各行が何回実行されたかを示す。これらのログファイルを@command{gprof}とともに使用すると、プログラムのパフォーマンスを微調整するのに役立つ。 @command{gprof}は、@command{gcov}から得た情報とともに使用できるタイミング情報を提供する。

@command{gcov}はGCCでコンパイルされたコードでのみ動作する。 他のプロファイリングまたはテストカバレッジメカニズムとの互換性はない。

@c man end

@node Invoking Gcov
@section @command{gcov}の呼出し

@smallexample
gcov @r{[}@var{options}@r{]} @var{files}
@end smallexample

@command{gcov}は以下のオプションを受け取る

@ignore
@c man begin SYNOPSIS
gcov [@option{-v}|@option{--version}] [@option{-h}|@option{--help}]
     [@option{-a}|@option{--all-blocks}]
     [@option{-b}|@option{--branch-probabilities}]
     [@option{-c}|@option{--branch-counts}]
     [@option{-d}|@option{--display-progress}]
     [@option{-f}|@option{--function-summaries}]
     [@option{-i}|@option{--intermediate-format}]
     [@option{-j}|@option{--human-readable}]
     [@option{-k}|@option{--use-colors}]
     [@option{-l}|@option{--long-file-names}]
     [@option{-m}|@option{--demangled-names}]
     [@option{-n}|@option{--no-output}]
     [@option{-o}|@option{--object-directory} @var{directory|file}]
     [@option{-p}|@option{--preserve-paths}]
     [@option{-r}|@option{--relative-only}]
     [@option{-s}|@option{--source-prefix} @var{directory}]
     [@option{-u}|@option{--unconditional-branches}]
     [@option{-x}|@option{--hash-filenames}]
     @var{files}
@c man end
@c man begin SEEALSO
gpl(7), gfdl(7), fsf-funding(7), gcc(1) and the Info entry for @file{gcc}.
@c man end
@end ignore

@c man begin OPTIONS
@table @gcctabopt

@item -a
@itemx --all-blocks
基本ブロックごとに個別の実行回数を記述する。 通常、gcovは行のメインブロックに対してのみ実行回数を出力する。 このオプションを使用すると、1行のブロックが実行されていないかどうかを判断できる。

@item -b
@itemx --branch-probabilities
出力ファイルにブランチ周波数を書き込み、ブランチサマリー情報を標準出力に書き出す。 このオプションを使用すると、プログラム内の各ブランチの使用頻度を確認できる。 @option{-u}オプションが指定されていない限り、無条件ブランチは表示されない。

@item -c
@itemx --branch-counts
分岐の頻度を、取られた分岐の割合ではなく、分岐の数として書き出す。

@item -d
@itemx --display-progress
進捗状況を標準出力に表示する。

@item -f
@itemx --function-summaries
ファイルレベルの要約に加えて、各関数の概要を出力する。

@item -h
@itemx --help
（標準出力に）@command{gcov}の使用に関するヘルプを表示し、それ以上の処理を行わずに終了する。

@item -i
@itemx --intermediate-format
@command{lcov}や他のツールで使用できる、簡単に解析できる中間テキスト形式のgcovファイルを出力する。 出力は@file{.gcda}ファイルごとに単一の@file{.gcov}ファイルである。 ソースコードは必要ない。

中間の@file {.gcov}ファイルの形式は、1行に1つのエントリを持つプレーンテキストである

@smallexample
version:@var{gcc_version}
file:@var{source_file_name}
function:@var{start_line_number},@var{end_line_number},@var{execution_count},@var{function_name}
lcount:@var{line number},@var{execution_count},@var{has_unexecuted_block}
branch:@var{line_number},@var{branch_coverage_type}

ここで@var{branch_coverage_type}は
   notexec (分岐は実行されなかった)
   taken (分岐は実行され、分岐した)
   nottaken (分岐は実行され、分岐しなかった)
@end smallexample

中間のgcovファイルには複数の@var{file}エントリがある。 @var{file}に続くすべてのエントリは、その次の@var{file}エントリまでそのソースファイルに関係する。 1行で開始する関数が複数ある場合、対応するlcountが複数回繰り返される。

@option{-i}を@option{-b}オプションと組み合わせて使用する場合のサンプルを次に示す。

@smallexample
version: 8.1.0 20180103
file:tmp.cpp
function:7,7,0,_ZN3FooIcEC2Ev
function:7,7,1,_ZN3FooIiEC2Ev
function:8,8,0,_ZN3FooIcE3incEv
function:8,8,2,_ZN3FooIiE3incEv
function:18,37,1,main
lcount:7,0,1
lcount:7,1,0
lcount:8,0,1
lcount:8,2,0
lcount:18,1,0
lcount:21,1,0
branch:21,taken
branch:21,nottaken
lcount:23,1,0
branch:23,taken
branch:23,nottaken
lcount:24,1,0
branch:24,taken
branch:24,nottaken
lcount:25,1,0
lcount:27,11,0
branch:27,taken
branch:27,taken
lcount:28,10,0
lcount:30,1,1
branch:30,nottaken
branch:30,taken
lcount:32,1,0
branch:32,nottaken
branch:32,taken
lcount:33,0,1
branch:33,notexec
branch:33,notexec
lcount:35,1,0
branch:35,taken
branch:35,nottaken
lcount:36,1,0
@end smallexample

@item -j
@itemx --human-readable
人間が判読可能なフォーマット（24kなど）でカウントを書き込む。

@item -k
@itemx --use-colors
カバレッジがゼロのコード行には色を使用する。 例外でない行は赤、例外はシアンを使用する。 @option{-a}オプションを持つ基本ブロックには同じ色が使われる。


@item -l
@itemx --long-file-names
インクルードされたソースファイルの長いファイル名を作成する。 たとえば、ヘッダーファイル@file{x.h}がコードを含み、それがファイル@file{a.c}でインクルードされている場合、@file{a.c}ファイルで@command{gcov}を実行すると、@file{x.h.gcov}の代わりに@file{a.c##x.h.gcov}という出力ファイルが生成される。 @file{x.h}が複数のソースファイルに含まれていて、個々の貢献を見たい場合に便利である。 @samp{-p}オプションを使用すると、インクルードファイル名とインクルードファイル名の両方が完全なパス名になる。

@item -m
@itemx --demangled-names
デマングル関数名を出力に表示する。 デフォルトでは、マングルされた関数名が表示される。

@item -n
@itemx --no-output
@command {gcov}出力ファイルを作成しない。

@item -o @var{directory|file}
@itemx --object-directory @var{directory}
@itemx --object-file @var{file}
gcovデータファイルを含むディレクトリ、またはオブジェクトのパス名を指定する。 このオプションを使用するために、@file{.gcno}および@file{.gcda}データファイルが検索される。 ディレクトリが指定されている場合、データファイルはそのディレクトリにあり、入力ファイル名の後に拡張子は付けられない。ここでファイルを指定すると、データファイルの名前はそのファイルの後に拡張子を付けずに指定される。

@item -p
@itemx --preserve-paths
生成された@file{.gcov}ファイルの名前に完全なパス情報を保持する。 このオプションを指定しないと、ファイル名コンポーネントだけが使用される。 このオプションを使用すると、すべてのディレクトリが使用され、@samp{/}文字は@samp{#}文字に変換され、@ file{.}ディレクトリコンポーネントは削除され、削除不可能な@file{..}コンポーネントは@samp{^}に名前が変更される これは、ソースファイルが複数の異なるディレクトリにある場合に便利である。

@item -r
@itemx --relative-only
相対パス名を持つソースファイルに関する情報のみを出力する（ソースプレフィックスエリーションの後）。 絶対パスは通常システムヘッダファイルであり、その中のインライン関数のカバレッジは通常は関心がない。

@item -s @var{directory}
@itemx --source-prefix @var{directory}
出力カバレッジファイルを生成するときに削除するソースファイル名の接頭辞。 このオプションは、別のディレクトリにビルドするときに便利である。出力ファイル名を決定する際には、ソースディレクトリへのパス名は必要ない。 このプレフィックス検出は、ソースファイルが絶対パスかどうかを判断する前に適用されることに注意せよ。

@item -u
@itemx --unconditional-branches
分岐確率が与えられるとき、無条件分岐のものを含む。 無条件分岐は通常は関心がない。

@item -v
@itemx --version
@command{gcov}のバージョン番号を（標準出力に）表示し、それ以上の処理をせずに終了する。

@item -w
@itemx --verbose
基本ブロックとアークに関連する冗長な情報を出力する。

@item -x
@itemx --hash-filenames
デフォルトでは、gcovはソースファイルの完全パス名を使用して出力ファイル名を作成する。 これにより、長いファイル名がファイルシステムの制限をオーバーフローさせる可能性がある。 このオプションは@file{@var{source-file}##@var{md5}.gcov}という形式の名前を作成する。ここで、@var{source-file}コンポーネントは最終的なファイル名部分であり、@ var{md5} コンポーネントは、それ以外の場合に使用されていた完全に変形された名前から計算される。

@end table

@command{gcov}は、コンパイラを起動したときと同じカレントディレクトリで実行する必要がある。 そうしないと、ソースファイルを見つけることができなくなる。 @command{gcov}は、現在のディレクトリに@file{@var{mangledname}.gcov}というファイルを生成する。 これらは、対応するソースファイルのカバレッジ情報を含む。 1つの@file{.gcov}ファイルは、データファイルを生成するためにコンパイルされたコードを含むソース（またはヘッダー）ファイルごとに生成される。 出力ファイル名の@var{mangledname}部分は通常は単純にソースファイル名だが、@samp{-l}や@samp{-p}オプションが与えられれば、もっと複雑になることがある。 詳細については、これらのオプションを参照せよ。

複数の入力ファイルで@command{gcov}を呼び出すと、各入力ファイルからの貢献が合計される。 通常は、実行可能ファイルの最終リンクと同じファイルリストを使用して呼び出す。

@file{.gcov}ファイルには、プログラムのソースコードと共に@samp{:}で区切られたフィールドが含まれている。 形式は次のとおりである。

@smallexample
@var{execution_count}:@var{line_number}:@var{source line text}
@end smallexample

コマンドラインオプションで要求された場合、追加のブロック情報が各行に続くかもしれない。 @var{execution_count}はコードを含まない行では@samp{-}である。 実行されていない行は、非例外的なパスによって到達可能であるか、C++の例外ハンドラのような例外的なパスのみで到達可能であるかに応じて、@samp{#####}または@samp{=====}とマークされる。 @samp{-a}オプションが指定されていると、実行されていないブロックには、例外的パスまたは例外的パスを介して基本ブロックが到達可能かどうかによって@samp{$$$$$}または@samp{%%%%%}とマークされる。 ゼロの@var{execution_count}である文を持つ実行された基本ブロックはが@samp {*}文字で終わり、@option{-k}オプションではマゼンタ色で色付けされる。 この機能はAdaではサポートされていない。

GCCは、必要でない関数の本体を完全に削除することがある（たとえば、どこにでもインライン化されている場合など）。 このような関数は@samp{-}でマークされていて、混乱する可能性がある。 @option{-fkeep-inline-functions}オプションと@option{-fkeep-static-functions}オプションを使用してこれらの関数を保持し、gcovが@var{execution_count}を正しく表示できるようにする。

最初の情報行では、@var{line_number}が0になっている。これらのプリアンブルラインは、以下形式である。

@smallexample
-:0:@var{tag}:@var{value}
@end smallexample

これらのプリアンブル行の順序と数は、@command{gcov}の開発が進むにつれて増加する---変更されていないままに依存してはならない。 特定のプリアンブル行を見つけるには@var{tag}を使う。

付加的なブロック情報は、以下の形式である

@smallexample
@var{tag} @var{information}
@end smallexample

@var{information}は人間が読める形式だが、マシンの解析にも簡単に使えるように設計されている。

パーセンテージを出力するとき、0％と100％は値が@emph{正確に}0％と100％のときにのみ表示される。 従来は0％または100％に丸められた他の値は代わりに、最も近い非境界値として出力される。

@command{gcov}を使用する場合は、まず2つの特別なGCCオプション@samp{-fprofile-arcs -ftest-coverage}を使用してプログラムをコンパイルする必要がある。 これは、gcov（基本的にはプログラムのフローグラフ）に必要な追加情報を生成するようにコンパイラに指示する。また、gcovに必要な追加のプロファイリング情報を生成するためのオブジェクトファイルにコードを追加する。 これらの追加ファイルは、オブジェクトファイルが置かれているディレクトリに置かれる。

プログラムを実行すると、プロファイル出力が生成される。 @option{-fprofile-arcs}でコンパイルされた各ソースファイルに対して、付随する@file{.gcda}ファイルがオブジェクトファイルディレクトリに配置される。

プログラムのソースファイル名を引数として@command{gcov}を実行すると、各行の実行頻度とともにコードのリストが生成されえる。 たとえば、プログラムの名前が@file{tmp.cpp}の場合、これは基本的な@command{gcov}機能を使用するときに表示される。

@smallexample
$ g++ -fprofile-arcs -ftest-coverage tmp.cpp
$ a.out
$ gcov tmp.cpp -m
File 'tmp.cpp'
Lines executed:92.86% of 14
Creating 'tmp.cpp.gcov'
@end smallexample

ファイル@file{tmp.cpp.gcov}には、@コマンド{gcov}の出力が含まれている。ここにサンプルがある：

@smallexample
        -:    0:Source:tmp.cpp
        -:    0:Graph:tmp.gcno
        -:    0:Data:tmp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:
        -:    3:template<class T>
        -:    4:class Foo
        -:    5:@{
        -:    6:  public:
       1*:    7:  Foo(): b (1000) @{@}
------------------
Foo<char>::Foo():
    #####:    7:  Foo(): b (1000) @{@}
------------------
Foo<int>::Foo():
        1:    7:  Foo(): b (1000) @{@}
------------------
       2*:    8:  void inc () @{ b++; @}
------------------
Foo<char>::inc():
    #####:    8:  void inc () @{ b++; @}
------------------
Foo<int>::inc():
        2:    8:  void inc () @{ b++; @}
------------------
        -:    9:
        -:   10:  private:
        -:   11:  int b;
        -:   12:@};
        -:   13:
        -:   14:template class Foo<int>;
        -:   15:template class Foo<char>;
        -:   16:
        -:   17:int
        1:   18:main (void)
        -:   19:@{
        -:   20:  int i, total;
        1:   21:  Foo<int> counter;
        -:   22:
        1:   23:  counter.inc();
        1:   24:  counter.inc();
        1:   25:  total = 0;
        -:   26:
       11:   27:  for (i = 0; i < 10; i++)
       10:   28:    total += i;
        -:   29:
       1*:   30:  int v = total > 100 ? 1 : 2;
        -:   31:
        1:   32:  if (total != 45)
    #####:   33:    printf ("Failure\n");
        -:   34:  else
        1:   35:    printf ("Success\n");
        1:   36:  return 0;
        -:   37:@}
@end smallexample

7行目はレポートに複数回表示されている。 最初の表示は行の総実行回数を表し、次の2つはクラスFooコンストラクタのインスタンスに属す。見たとおり、30行目には未実行の基本ブロックが含まれているため、実行カウントにはアスタリスク記号が付く。

@option{-a}オプションを使用すると、個々のブロック数が取得され、出力は次のようになる。

@smallexample
        -:    0:Source:tmp.cpp
        -:    0:Graph:tmp.gcno
        -:    0:Data:tmp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:
        -:    3:template<class T>
        -:    4:class Foo
        -:    5:@{
        -:    6:  public:
       1*:    7:  Foo(): b (1000) @{@}
------------------
Foo<char>::Foo():
    #####:    7:  Foo(): b (1000) @{@}
------------------
Foo<int>::Foo():
        1:    7:  Foo(): b (1000) @{@}
------------------
       2*:    8:  void inc () @{ b++; @}
------------------
Foo<char>::inc():
    #####:    8:  void inc () @{ b++; @}
------------------
Foo<int>::inc():
        2:    8:  void inc () @{ b++; @}
------------------
        -:    9:
        -:   10:  private:
        -:   11:  int b;
        -:   12:@};
        -:   13:
        -:   14:template class Foo<int>;
        -:   15:template class Foo<char>;
        -:   16:
        -:   17:int
        1:   18:main (void)
        -:   19:@{
        -:   20:  int i, total;
        1:   21:  Foo<int> counter;
        1:   21-block  0
        -:   22:
        1:   23:  counter.inc();
        1:   23-block  0
        1:   24:  counter.inc();
        1:   24-block  0
        1:   25:  total = 0;
        -:   26:
       11:   27:  for (i = 0; i < 10; i++)
        1:   27-block  0
       11:   27-block  1
       10:   28:    total += i;
       10:   28-block  0
        -:   29:
       1*:   30:  int v = total > 100 ? 1 : 2;
        1:   30-block  0
    %%%%%:   30-block  1
        1:   30-block  2
        -:   31:
        1:   32:  if (total != 45)
        1:   32-block  0
    #####:   33:    printf ("Failure\n");
    %%%%%:   33-block  0
        -:   34:  else
        1:   35:    printf ("Success\n");
        1:   35-block  0
        1:   36:  return 0;
        1:   36-block  0
        -:   37:@}
@end smallexample

このモードでは、各基本ブロックは1つの行、つまりブロックの最後の行にのみ表示される。 複数行のブロックはその最後の行の実行カウントにのみ寄与し、前のブロックがそれらの行で終わらない限り、他の行はコードを含むようには表示されない。 行の合計実行カウントが表示され、後続の行はその行で終了する個々のブロックの実行カウントを示す。 各ブロックの後に、@option{-b}オプションが指定されている場合、ブロックの分岐と呼び出しのカウントが表示される。

GCCインストルメントが呼び出す方法のため、個々のブロックがない行の後に呼び出しカウントを表示することができる。 見たとおりに、33行目には実行されなかった基本ブロックが含まれている。

@need 450
@option{-b}オプションを使用すると、出力は次のようになる。

@smallexample
        -:    0:Source:tmp.cpp
        -:    0:Graph:tmp.gcno
        -:    0:Data:tmp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:
        -:    3:template<class T>
        -:    4:class Foo
        -:    5:@{
        -:    6:  public:
       1*:    7:  Foo(): b (1000) @{@}
------------------
Foo<char>::Foo():
function Foo<char>::Foo() called 0 returned 0% blocks executed 0%
    #####:    7:  Foo(): b (1000) @{@}
------------------
Foo<int>::Foo():
function Foo<int>::Foo() called 1 returned 100% blocks executed 100%
        1:    7:  Foo(): b (1000) @{@}
------------------
       2*:    8:  void inc () @{ b++; @}
------------------
Foo<char>::inc():
function Foo<char>::inc() called 0 returned 0% blocks executed 0%
    #####:    8:  void inc () @{ b++; @}
------------------
Foo<int>::inc():
function Foo<int>::inc() called 2 returned 100% blocks executed 100%
        2:    8:  void inc () @{ b++; @}
------------------
        -:    9:
        -:   10:  private:
        -:   11:  int b;
        -:   12:@};
        -:   13:
        -:   14:template class Foo<int>;
        -:   15:template class Foo<char>;
        -:   16:
        -:   17:int
function main called 1 returned 100% blocks executed 81%
        1:   18:main (void)
        -:   19:@{
        -:   20:  int i, total;
        1:   21:  Foo<int> counter;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   22:
        1:   23:  counter.inc();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   24:  counter.inc();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   25:  total = 0;
        -:   26:
       11:   27:  for (i = 0; i < 10; i++)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
       10:   28:    total += i;
        -:   29:
       1*:   30:  int v = total > 100 ? 1 : 2;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   31:
        1:   32:  if (total != 45)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   33:    printf ("Failure\n");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   34:  else
        1:   35:    printf ("Success\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   36:  return 0;
        -:   37:@}
@end smallexample

各関数について、関数が呼び出された回数、関数が返された回数、関数のブロックの何％が実行されたかを示す行が出力される。

各基本ブロックについて、基本ブロックの最後の行の後に行が出力され、基本ブロックを終了する分岐または呼び出しを記述する。 その行で終わる複数の基本ブロックがある場合、単一のソース行に複数の分岐と呼び出しが表示される。 この場合、ブランチとコールにはそれぞれ番号が割り当てられる。 これらのブランチとコールをソース構造にマップする簡単な方法はない。 しかし、一般的に、番号が最も小さいブランチまたはコールは、ソース行の一番左の構文に対応する。

ブランチの場合、少なくとも1回実行された場合、ブランチが実行された回数を示すパーセンテージがブランチが実行された回数で除算される。 そうでなければ、 「never executed」というメッセージが表示される。

呼び出しの場合、少なくとも1回実行された場合、呼び出しが返された回数を呼び出した回数で割った値が出力される。 これは通常100％だが、@code{exit}や@code{longjmp}を呼び出し、したがって呼び出されるたびに返さないかもしれない関数の場合は少なくなる。

実行回数は累積される。 サンプルプログラムが@file{.gcda}ファイルを削除せずに再度実行された場合、ソースの各行が実行された回数のカウントが前の実行の結果に追加される。 これは、いくつかの点で潜在的に有用である。 たとえば、テストベリフィケーションスイートの一部として多数のプログラム実行にデータを蓄積したり、多数のプログラム実行にわたってより正確な長期情報を提供するために使用できる。

@file{.gcda}ファイルのデータは、プログラムが終了する直前に保存される。 @option{-fprofile-arcs}でコンパイルされたソースファイルごとに、プロファイリングコードはまず既存の@file{.gcda}ファイルを読み込もうとする。 ファイルが実行可能ファイル（基本ブロック数が異なる）と一致しない場合、ファイルの内容は無視される。 その後、新しい実行カウントが追加され、最後にデータがファイルに書き込まれる。

@node Gcov and Optimization
@section @command{gcov}をGCC最適化で使う

コードを最適化するために@command{gcov}を使用する予定の場合は、最初に@samp{-fprofile-arcs -ftest-coverage}の2つの特別なGCCオプションを使用してプログラムをコンパイルする必要がある。 それ以外にも、他のGCCオプションを使うことができる。 プログラムのすべての行が実行されたことを証明したい場合は、同時に最適化を行うべきではない。 一部のマシンでは、オプティマイザは、単純なコード行を他の行と組み合わせることでそれらを削除することができる。 たとえば、次のようなコードは、

@smallexample
if (a != b)
  c = 1;
else
  c = 0;
@end smallexample

@noindent
いくつかのマシン上で1つの命令にコンパイルすることができる。 この場合、@command{gcov}が行ごとに別個のコードがないので、各行の個別の実行カウントを計算する方法はない。 したがって、最適化してプログラムをコンパイルした場合、@command{gcov}の出力は次のようになる。

@smallexample
      100:   12:if (a != b)
      100:   13:  c = 1;
      100:   14:else
      100:   15:  c = 0;
@end smallexample

出力は、最適化によって結合されたこのコードブロックが100回実行されたことを示している。 ある意味では、これらの行の4つすべてを表す命令は1つしかないので、この結果は正しい。 しかし、出力は、結果が0であった回数と結果が1であった回数を示していない。

インライン関数は予期しない行数を生成する可能性があります。 インライン関数のソースコードの行数が表示されるが、表示されるのは関数がインライン化されているか、インライン化されていないかによって異なる。

関数がインライン化されていない場合、コンパイラは関数を必要とするオブジェクトファイル内で関数のアウトラインコピーを出力する必要がある。 @file{fileA.o}と@file{fileB.o}の両方に、特定のインライン化可能な関数の行外本体が含まれている場合、その関数のカバレッジ数も両方含まれる。 @file{fileA.o}と@file{fileB.o}がリンクされていると、多くのシステムで、リンカーはその関数の呼び出しのために行の本体から1つを選択し、他のものを取り除くか無視する。 残念ながら、未使用の関数本体のカバレッジカウンタは削除されない。 したがって、計装されると、その関数を使用しているものの一つ以外すべてで、ゼロカウントが表示される。

関数がいくつかの場所にインライン展開されている場合、各場所のブロック構造は同じではない可能性がある。 たとえば、ある時点でコンパイル時に条件を計算できるようになったかもしれない。 インライン関数のすべての用途のカバレッジが同じソース行に表示されるため、行数自体が矛盾しているように見えるかもしれない。

長時間実行しているアプリケーションでは、@code{__gcov_reset}と@code{__gcov_dump}機能を使用して、プロファイル収集を対象のプログラム領域に制限できる。 @code{__gcov_reset(void)}を呼び出すと、すべてのプロファイルカウンタがゼロにクリアされ、@code{__gcov_dump(void)}を呼び出すと、その時点で収集されたプロファイル情報が@file{.gcda}出力ファイルにダンプされる。 計装されたアプリケーションでは、優先順位99の静的デストラクタを使用して@code{__ gcov_dump}関数を呼び出す。 したがって、@code{__ gcov_dump}は、すべてのユーザ定義の静的デストラクタ、@code{atexit}で登録されたハンドラの後に実行される。 実行可能ファイルがdlopen機能を介して動的共有オブジェクトをロードする場合、すべてのプロファイルデータをダンプするには@option{-Wl,--dynamic-list-data}が必要である。

@c man end

@node Gcov Data Files
@section @command{gcov}データファイルの短い説明

@command{gcov}はプロファイリングのために2つのファイルを使う。 これらのファイルの名前は、ファイルの接尾辞を@file{.gcno}または@file{.gcda}に置き換えることによって、元の@emph{object}ファイルから派生する。 ファイルには、プラットフォームに依存しない形式で格納されたカバレッジおよびプロファイルデータが含まれている。 @file{.gcno}ファイルは、オブジェクトファイルと同じディレクトリに置かれる。 デフォルトでは、@file{.gcda}ファイルもオブジェクトファイルと同じディレクトリに格納されるが、GCC @option{-fprofile-dir}オプションは@file{.gcda}ファイルを別のディレクトリに保存するために使用できる。

@file{.gcno}ノートファイルは、ソースファイルがGCC @option{-ftest-coverage}オプションでコンパイルされたときに生成される。 基本ブロックグラフを再構成し、ソース行番号をブロックに割り当てるための情報が含まれている。

@file{.gcda}カウントデータファイルは、GCC @option{-fprofile-arcs}オプションでビルドされたオブジェクトファイルを含むプログラムが実行されると生成される。 このオプションでコンパイルされたオブジェクトファイルごとに別の@file{.gcda}ファイルが作成される。 これには、アーク転移カウント、値プロファイルカウント、およびいくつかのサマリー情報が含まれている。

カバレッジファイルに直接アクセスすることは推奨されない。 消費者は@command{gcov}ツールで@option{--intermediate-format}オプションで提供される中間形式を使用する必要がある。

@node Cross-profiling
@section クロスプロファイルをサポートするためのデータファイルの再配置

プログラムを実行すると、プロファイル出力が生成される。 @option{-fprofile-arcs}でコンパイルされた各ソースファイルに対して、付随する@file{.gcda}ファイルがオブジェクトファイルディレクトリに配置される。 これは暗黙のうちに、プログラムがビルドされたのと同じシステム上で実行されること、またはターゲットシステム上で同じ絶対ディレクトリ構造を持つことを必要とする。 まだ存在していなければ、プログラムは必要なディレクトリ構造を作成しようとする。

クロスプロファイルをサポートするために、@option{-fprofile-arcs}でコンパイルされたプログラムは、2つの環境変数に基づいてデータファイルを再配置できる。

@itemize @bullet
@item
GCOV_PREFIXには、オブジェクトファイル内の絶対パスに追加する接頭辞が含まれている。 接頭辞は絶対または相対であることができる。 デフォルトでは接頭辞はない。

@item
GCOV_PREFIX_STRIPは、固定で書かれた絶対パスを削除する初期ディレクトリ名の数を示す。 デフォルト値は0である。

@emph{注意:} GCOV_PREFIX_STRIPがGCOV_PREFIXを設定せずに設定されている場合、固定で書かれた絶対パスから相対パスが作成される。
@end itemize

たとえば、オブジェクトファイル@file{/user/build/foo.o}が@option{-fprofile-arcs}でビルドされている場合、最終実行ファイルはターゲットシステムで実行中はデータファイル@file{/user/build/foo.gcda}を作成しようとする。 対応するディレクトリが存在せず、それを作成できない場合、これは失敗する。 これは、たとえば、環境を@samp{GCOV_PREFIX=/target/run}と@samp{GCOV_PREFIX_STRIP=1}に設定することで解決できる。 このような設定では、データファイルの名前は@file{/target/run/build/foo.gcda}となる。

プロファイル指示最適化（@option{-fprofile-use}）、または@command{gcov}ツールを使用するためには、データファイルを予想されるディレクトリツリーに移動する必要がある。
