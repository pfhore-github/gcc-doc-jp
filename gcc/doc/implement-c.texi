@c Copyright (C) 2001-2018 Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@node C Implementation
@chapter Cの実装定義の振る舞い
@cindex implementation-defined behavior, C language

ISO Cの適合する実装は、「実装定義」と呼ばれる各分野における行動の選択肢を文書化することを要求している。ISO / IEC 9899：1990、ISO/IEC 9899：1999およびISO/IEC 9899：2011規格のセクション番号とともに、このようなすべての領域を以下に示す。一部の領域は、標準の1つのバージョンでのみ実装定義されている。

いくつかの選択肢は、GCCが従うプラットフォーム（標準の文字エンコーディングを含む）のために外部で決定されたABIに依存する。 これらは「ABIによって決定される」と以下にリストされている。@xref{Compatibility, , バイナリ互換性}, と@uref{http://gcc.gnu.org/readings.html}。いくつかの選択肢は、プリプロセッサのマニュアルに記載されている。
@xref{Implementation-defined behavior, , 実装依存の振る舞い, cpp, The C Preprocessor}.  ライブラリとオペレーティングシステム（または自立環境用にコンパイルするときは他の環境）によって選択されるものもある。 詳細については、そのドキュメントを参照せよ。

@menu
* 翻訳実装::
* 環境実装::
* 識別子実装::
* 文字実装::
* 整数実装::
* 浮動小数点実装::
* 配列とポインタの実装::
* ヒントの実装::
* 構造体、共用体、列挙、ビットフィールド実装::
* 限定子実装::
* 宣言子実装::
* 文実装::
* プリプロセスディレクティブ実装::
* ライブラリ関数の実装::
* アーキテクチャ実装::
* ロケール固有の振る舞いの実装::
@end menu

@node 翻訳実装
@section 翻訳

@itemize @bullet
@item
@cite{診断の特定方法 (C90 3.7, C99 と C11 3.10, C90, C99 と C11 5.1.1.3)。}

診断は、GCCによってすべてstderrに送信された出力で構成される。

@item
@cite{改行以外の空白以外の空白文字列が、翻訳フェーズ3で1つの空白文字で保持されているか置き換えられているかどうか (C90, C99 と C11 5.1.1.2)。}

@xref{Implementation-defined behavior, , 実装依存の振る舞い, cpp, The C Preprocessor}

@end itemize

@node 環境実装
@section 環境

これらのポイントのほとんどの動作は、Cライブラリの実装に依存しており、GCC自体では定義されていない。

@itemize @bullet
@item
@cite{翻訳フェーズ1で物理ソースファイルのマルチバイト文字とソースキャラクタセットとの間のマッピング (C90, C99 と C11 5.1.1.2)。}

@xref{Implementation-defined behavior, , 実装依存の振る舞い, cpp, The C Preprocessor}

@end itemize

@node 識別子実装
@section 識別子

@itemize @bullet
@item
@cite{どの追加のマルチバイト文字が識別子に現れ、ユニバーサル文字名に対応するか (C99 と C11 6.4.2)。}

@xref{Implementation-defined behavior, , 実装依存の振る舞い, cpp, The C Preprocessor}

@item
@cite{識別子の有効な初期文字の数
(C90 6.1.2, C90, C99 と C11 5.2.4.1, C99 と C11 6.4.2)。}

内部名の場合、すべての文字が有効である。 外部名の場合、重要な文字の数はリンカーによって定義される。 ほぼすべてのターゲットで、すべての文字が有効である。

@item
@cite{外部リンケージを持つ識別子で大文字と小文字の区別が有効であるかどうか (C90 6.1.2)。}

これはリンカーのプロパティである。 C99とC11では、外部リンクを持つ識別子で大文字と小文字の区別が常に有効であり、このプロパティのないシステムはGCCではサポートされていない。

@end itemize

@node 文字実装
@section 文字

@itemize @bullet
@item
@cite{バイトのビット数 (C90 3.4, C99 と C11 3.6)。}

ABIによって決定される。

@item
@cite{実行文字集合のメンバの数 (C90, C99 と C11 5.2.1)。}

ABIによって決定される。

@item
@cite{各標準アルファベットエスケープシーケンスに対して生成された実行文字セットのメンバの一意の値。 (C90, C99 と C11 5.2.2)。}

ABIによって決定される。

@item
@cite{基本実行文字セットのメンバー以外の文字が格納されている@code {char}オブジェクトの値
(C90 6.1.2.5, C99 と C11 6.2.5。}

ABIによって決定される。

@item
@cite{@code {signed char}または@code {unsigned char}のどちらが「素の」@code{char}と同じ範囲、表現、動作を持つか(C90 6.1.2.5, C90 6.2.1.1, C99 と C11 6.2.5, C99 と C11 6.3.1.1)。}

@opindex fsigned-char
@opindex funsigned-char
ABIによって決定される。 オプション@option {-funsigned-char}と@option {-fsigned-char}はデフォルトを変更する。 @xref{C Dialect Options, ,Options Controlling C Dialect}

@item
@cite{ソース文字セット（文字定数と文字列リテラル）のメンバーの実行文字セットのメンバーへのマッピング (C90 6.1.3.4, C99 と C11 6.4.4.4, C90, C99 と C11 5.1.1.2)。}

ABIによって決定される。

@item
@cite{複数の文字を含む、またはシングルバイトの実行文字にマップされない文字またはエスケープシーケンスを含む整数文字定数の値 (C90 6.1.3.4, C99 と C11 6.4.4.4)。}

@xref{Implementation-defined behavior, , 実装依存の振る舞い, cpp, The C Preprocessor}。

@item
@cite{複数のマルチバイト文字を含むワイド文字定数、または拡張実行文字セットの複数のメンバーにマップする単一マルチバイト文字、または拡張実行文字セットで表されていないマルチバイト文字またはエスケープシーケンスを含むワイド文字定数の値 (C90 6.1.3.4, C99 と C11 6.4.4.4)。}

@xref{Implementation-defined behavior, , 実装依存の振る舞い, cpp, The C Preprocessor}。

@item
@cite{拡張実行文字セットのメンバーにマップされる単一のマルチバイト文字からなるワイド文字定数を対応するワイド文字コードに変換するために使用される現在のロケール (C90 6.1.3.4, C99 と C11 6.4.4.4)。}

@xref{Implementation-defined behavior, , 実装依存の振る舞い, cpp, The C Preprocessor}。

@item
@cite{異なる接頭辞のワイド文字列リテラルトークンを連結することができるかどうか、もしそうであれば、結果として生じるマルチバイト文字シーケンスの処理 (C11 6.4.5)。}

そのようなトークンは連結することはできない。

@item
@cite{ワイド文字列リテラルを対応するワイド文字コードに変換するために使用される現在のロケール (C90 6.1.4, C99 と C11 6.4.5)。}

@xref{Implementation-defined behavior, , 実装依存の振る舞い, cpp, The C Preprocessor}。

@item
@cite{実行文字セットで表されていないマルチバイト文字またはエスケープシーケンスを含む文字列リテラルの値 (C90 6.1.4, C99 と C11 6.4.5)。}

@xref{Implementation-defined behavior, , 実装依存の振る舞い, cpp, The C Preprocessor}。

@item
@cite{対応する標準エンコーディングマクロ(@code{__STDC_ISO_10646__}, @code{__STDC_UTF_16__}, or
@code{__STDC_UTF_32__})が定義されていないときの@code{wchar_t}、@code{char16_t}、および@code{char32_t}のいずれかのエンコーディング (C11 6.10.8.2)。}

@xref{Implementation-defined behavior, , 実装依存の振る舞い, cpp, The C Preprocessor}。  @code {char16_t}と@code {char32_t}リテラルは、それぞれ常にUTF-16とUTF-32でエンコードされる。

@end itemize

@node 整数実装
@section 整数

@itemize @bullet
@item
@cite{実装に存在するすべての拡張整数型 (C99とC11 6.2.5)。}

GCCは拡張整数型をサポートしていない。
@c The __mode__ attribute might create types of precisions not
@c otherwise supported, but the syntax isn't right for use everywhere
@c the standard type names might be used.  Predefined typedefs should
@c be used if any extended integer types are to be defined.  The
@c __int128_t and __uint128_t typedefs are not extended integer types
@c as they are generally longer than the ABI-specified intmax_t.

@item
@cite{符号付き整数型が符号と大きさで表現されるのか、2の補数なのか、または1の補数を使用して表現されるかどうか、および異常値がトラップ表現か通常値かどうか。 (C99 と C11 6.2.6.2)。}

GCCは2の補数の整数型のみをサポートし、すべてのビットパターンは通常の値である。

@item
@cite{同じ精度を持つ別の拡張整数型に関連する拡張整数型のランク (C99 と C11 6.3.1.1)。}

GCCは拡張整数型をサポートしていない。
@c If it did, there would only be one of each precision and signedness.

@item
@cite{その型のオブジェクトで値を表現できないときに、整数を符号付き整数型に変換した結果、またはそれによって生成されたシグナル (C90 6.2.1.2, C99 と C11 6.3.1.3)。}

幅@math{N}の型に変換する場合、値は@math{2^N}で割ったあまりである。 シグナルは発生しない。

@item
@cite{符号付き整数のビット演算の結果 (C90 6.3, C99 と C11 6.5)。}

ビット演算子は、符号ビットと値ビットの両方を含む値の表現に作用する。符号ビットは、最大値のビットのすぐ上にあるとみなされる。 符号付き@samp{>>}は符号拡張で負の数に作用する。

C言語への拡張として、GCCはC99とC11で与えられた自由度を使用して、符号付き@samp{<<}の特定の側面を未定義として扱わない。しかし、@option{-fsanitize=shift}（および@option{-fsanitize=undefined}）は、このようなケースを診断する。 定数値が必要な場合も診断される。

@item
@cite{整数除算の余りの符号 (C90 6.3.5)。}

GCCは、除算の結果がゼロに向かって切り捨てられるというC99とC11の要件に常に従う。

@end itemize

@node 浮動小数点実装
@section 浮動小数点

@itemize @bullet
@item
@cite{浮動小数点演算と、浮動小数点結果を返す@code{<math.h>}および@code{<complex.h>}のライブラリ関数の精度 (C90, C99 と C11 5.2.4.2.2)。}

精度は不明である。

@item
@cite{@code{FLT_ROUNDS}の非標準値によって特徴付けられる丸め動作(C90, C99 と C11 5.2.4.2.2)。}

GCCにはそのような値はない。

@item
@cite{@code{FLT_EVAL_METHOD}の非標準の負の値によって特徴付けられる評価方法 (C99 と C11 5.2.4.2.2)。}

GCCにはそのような値はない。

@item
@cite{整数が、元の値を正確に表現できない浮動小数点数に変換された場合の丸めの方向 (C90 6.2.1.3, C99 と C11 6.3.1.4)。}

C99付録Fに従う。

@item
@cite{浮動小数点数をより小さい浮動小数点数に変換する場合の丸めの方向 (C90 6.2.1.4, C99 と C11 6.3.1.5)。}

C99付録Fに従う。

@item
@cite{最も近い表現可能な値、または最も近い表現可能な値に直に隣接するより大きなまたはより小さな表現可能な値が、ある浮動定数に対してどのように選択されるか (C90 6.1.3.1, C99 と C11 6.4.4.2)。}

C99付録Fに従う。

@item
@cite{@code {FP_CONTRACT}プラグマで許可されていない浮動式が収縮するかどうか (C99 と C11 6.5)。}

式は、@option{-ffp-contract=fast}、@option{-funsafe-math-optimizations}または@option{-ffast-math}が使用されている場合にのみ、現在のところ収縮する。これは変更されることがある。

@item
@cite{@code {FENV_ACCESS}プラグマのデフォルトの状態 (C99 と C11 7.6.1)。}

このプラグマは実装されていないが、デフォルトは@option{-frounding-math}が使われていない限りは「オフ」であり、使われている場合は「オン」である。

@item
@cite{追加の浮動小数点例外、丸めモード、環境、および分類、およびそれらのマクロ名(C99 と C11 7.6, C99 と C11 7.12)。}

これはCライブラリの実装に依存し、GCC自体では定義されていない。

@item
@cite{@code{FP_CONTRACT}プラグマのデフォルトの状態 (C99 と C11 7.12.2)。}

このプラグマは実装されていない。 式は、@option{-ffp-contract = fast}、@option{-funsafe-math-optimizations}または@option{-ffast-math}が使用されている場合にのみ、現在のところ収縮する。これは変更されることがある。

@item
@cite{丸められた結果が実際にIEC 60559準拠の実装における数学的結果と等しい場合に、「不正確な」浮動小数点例外を発生させることができるかどうか (C99 F.9)。}

これはCライブラリの実装に依存し、GCC自体では定義されていない。

@item
@cite{結果が小さいが、IEC 60559準拠の実装では不正確ではない場合に、「アンダーフロー」（および「不正確」）浮動小数点例外を発生させることができるかどうか (C99 F.9)。}

これはCライブラリの実装に依存し、GCC自体では定義されていない。

@end itemize

@node 配列とポインタの実装
@section 配列とポインタ

@itemize @bullet
@item
@cite{ポインタを整数に変換した結果、またはその逆の結果 (C90 6.3.4, C99 と C11 6.3.2.3)。}

ポインタ表現が整数型より大きい場合、ポインタから整数へのキャストは最上位ビットを破棄し、ポインタ表現が整数型よりも小さい場合は符号拡張し@footnote{GCCの将来のバージョンは、ゼロ拡張するか、ターゲット定義の@code{ptr_extend}パターンを使用するかもしれない。 符号拡張に頼ってはならない。}、そうでない場合はビットは変更されない。

@c ??? We've always claimed that pointers were unsigned entities.
@c Shouldn't we therefore be doing zero-extension?  If so, the bug
@c is in convert_to_integer, where we call type_for_size and request
@c a signed integral type.  On the other hand, it might be most useful
@c for the target if we extend according to POINTERS_EXTEND_UNSIGNED.

整数からポインタへのキャストは、ポインタ表現が整数型よりも小さい場合は最上位ビットを破棄し、ポインタ表現が整数型より大きい場合は整数型の符号長に従って拡張する。そうでなければビットは変更されない。

ポインタから整数へのキャストと再び戻るとき、結果のポインタは元のポインタと同じオブジェクトを参照する必要がある。そうでない場合、動作は未定義である。 つまり、C99とC11 6.5.6/8で宣言されているポインタ算術の未定義の振る舞いを避けるために、整数算術を使用することはできない。

@item
@cite{同じ配列の要素への2つのポインタを減算した結果のサイズ (C90 6.3.6, C99 と C11 6.5.6)。}

値は標準で指定されているとおりであり、型はABIによって決定されます。

@end itemize

@node ヒントの実装
@section ヒント

@itemize @bullet
@item
@cite{@code{register}ストレージクラス指定子を使用して提案された提案が有効である範囲 (C90 6.5.1, C99 と C11 6.7.1)。}

@code {register}指定子は、以下の方法でのみコード生成に影響する。

@itemize @bullet
@item
レジスタ変数拡張の一部として使用する場合、@ref{Explicit Register Variables}参照。

@item
@option{-O0}を使用すると、コンパイラは@code{register}ストレージクラス指定子を持たないすべての変数に別個のスタックメモリを割り当てる。 @code{register}が指定されている場合、変数はコードが示すよりも寿命が短く、決してメモリに置かれないことがある。

@item
あるまれなx86ターゲットでは、@code{setjmp}はすべての状況でレジスタを保存しない。 そのような場合、GCCは@code{register}と表示されていない限り、レジスタに変数を割り当てない。

@end itemize

@item
@cite{インライン関数指定子を使用した提案の有効範囲(C99 と C11 6.7.4)。}

@option{-fno-inline}オプションが使用されている場合や、@option{-O0}が使用されている場合、GCCは関数をインライン化しない。 そうしないと、GCCはいろいろな理由で関数をインライン化できないことがある。 @option{-Winline}オプションを使用して、関数がインライン化されていないかどうかとその理由を判断できる。

@end itemize

@node 構造体、共用体、列挙、ビットフィールド実装
@section 構造体、共用体、列挙、ビットフィールド

@itemize @bullet
@item
@cite{異なる型のメンバを使ってアクセスされる共用体のメンバ (C90 6.3.2.3)。}

オブジェクトの表現の関連するバイトは、アクセスに使用されるタイプのオブジェクトとして扱われる。 @xref{Type-punning}.  これはトラップ表現である可能性がある。

@item
@cite{「普通の」@code{int}ビットフィールドが@code{signed int}ビットフィールドとして扱われるか、@code{unsigned int}ビットフィールドとして扱われるか(C90 6.5.2, C90 6.5.2.1, C99 と C11 6.7.2, C99 と C11 6.7.2.1)。}

@opindex funsigned-bitfields
デフォルトでは、@code{signed int}と扱われるが、これは@option{-funsigned-bitfields}オプションによって変更される可能性がある。

@item
@cite{@code{_Bool}、@code{signed int}、および@code{unsigned int}以外の許容されるビットフィールド型 (C99 と C11 6.7.2.1)。}

厳密に準拠しているモードであっても、@code{long int}や列挙型などの他の整数型は許可される。

@item
@cite{ビットフィールドにアトミック型が許可されるかどうか (C11 6.7.2.1)。}

ビットフィールドにはアトミック型は許されません。

@item
@cite{ビットフィールドが記憶装置の境界をまたぐことができるかどうか (C90 6.5.2.1, C99 と C11 6.7.2.1)。}

ABIによって決定される。

@item
@cite{ユニット内のビットフィールドの割り当て順序 (C90 6.5.2.1, C99 と C11 6.7.2.1)。}

ABIによって決定される。

@item
@cite{構造体の非ビットフィールドメンバの配置 (C90 6.5.2.1, C99 と C11 6.7.2.1)。}

ABIによって決定される。

@item
@cite{各列挙型と互換性のある整数型 (C90 6.5.2.2, C99 と C11 6.7.2.2)。}

@opindex fshort-enums
通常、型は、列挙に負の値がない場合は@code{unsigned int}、そうでない場合は@code{int}である。@option{-fshort-enums}が指定されている場合、負の値がある場合、それはすべての値を表すことができる@code{signed char}、@code{short}と@code{int}の最初のものである。さもなければ、 すべての値を表すことができる@code{unsigned char}、@code{unsigned short}、@code{unsigned int}の最初である。
@c On a few unusual targets with 64-bit int, this doesn't agree with
@c the code and one of the types accessed via mode attributes (which
@c are not currently considered extended integer types) may be used.
@c If these types are made extended integer types, it would still be
@c the case that -fshort-enums stops the implementation from
@c conforming to C90 on those targets.

いくつかのターゲットでは、@option{-fshort-enums}がデフォルトである。 これはABIによって決定される。

@end itemize

@node 限定子実装
@section 限定子

@itemize @bullet
@item
@cite{volatile修飾された型を持つオブジェクトへのアクセスを構成するもの (C90 6.5.3, C99 と C11 6.7.3)。}

そのようなオブジェクトは、通常、ポインタによってアクセスされ、ハードウェアへのアクセスに使用される。ほとんどの表現では、それは直感的には何が読まれ、何が書かれているかが明らかである。 例えば

@smallexample
volatile int *dst = @var{somevalue};
volatile int *src = @var{someothervalue};
*dst = *src;
@end smallexample

@noindent
は、@var{src}が指し示す揮発性オブジェクトの読み込みを引き起こし、@var{dst}が指す揮発性オブジェクトに値を設定する。特に@code{int}より大きいオブジェクトの場合、これらの読み取りと書き込みがアトミックであるという保証はない。

しかし、揮発性ストレージが変更されておらず、揮発性ストレージの値が使用されていない場合、その状況はあまり明らかではない。例えば

@smallexample
volatile int *src = @var{somevalue};
*src;
@end smallexample

Cの標準によれば、このような式は、その型が元の型の非修飾バージョン、すなわち@code{int}である右辺値である。GCCがこれを揮発性オブジェクトの読み込みとして解釈するかどうか、またはその副作用のための式を評価する要求としてのみ解釈するかは、この型に依存する。

スカラー型である場合、またはほとんどのターゲットで、その唯一のメンバーオブジェクトがスカラ型である集約型、またはメンバーオブジェクトがスカラー型である共用体型の場合、式はGCCによって揮発性オブジェクトの読み込みと解釈される。 他のケースでは、式はその副作用についてのみ評価される。

@end itemize

@node 宣言子実装
@section 宣言子

@itemize @bullet
@item
@cite{算術、構造体または共用体型を変更する可能性がある宣言子の最大数 (C90 6.5.4)。}

GCCは利用可能なメモリによってのみ制限される。

@end itemize

@node 文実装
@section 文

@itemize @bullet
@item
@cite{@code {switch}ステートメント内の@code {case}値の最大数 (C90 6.6.4.2)。}

GCCは利用可能なメモリによってのみ制限される。

@end itemize

@node プリプロセスディレクティブ実装
@section プリプロセスディレクティブ

実装定義の動作のこれらの側面の詳細については、@xref{Implementation-defined behavior, , 実装依存の振る舞い, cpp, The C Preprocessor}。

@itemize @bullet
@item
@cite{@code{#pragma}ディレクティブ内でヘッダ名のプリプロセストークンが認識される場所 (C11 6.4, C11 6.4.7)。}

@item
@cite{ヘッダー名の両方の形式のシーケンスがヘッダーまたは外部ソースファイル名にどのようにマップされるか (C90 6.1.7, C99 と C11 6.4.7)。}

@item
@cite{条件付きインクルードを制御する定数式の文字定数の値が、実行文字セットの同じ文字定数の値と一致するかどうか (C90 6.8.1, C99 と C11 6.10.1)。}

@item
@cite{条件付きインクルードを制御する定数式の1文字の文字定数の値が負の値を持つかどうか (C90 6.8.1, C99 と C11 6.10.1)。}

@item
@cite{インクルードされた@samp{<>}で区切られたヘッダーが検索される場所、および場所の指定方法やヘッダーの識別方法 (C90 6.8.2, C99 と C11 6.10.2)。}

@item
@cite{指定された@samp{""}で区切られたヘッダ内で名前付きソースファイルがどのように検索されるか (C90 6.8.2, C99 と C11 6.10.2)。}

@item
@cite{@code{#include}ディレクティブのプリプロセストークン（マクロ展開の可能性がある）をヘッダ名に組み合わせる方法 (C90 6.8.2, C99 と C11 6.10.2)。}

@item
@cite{@code{#include}処理のネスト制限 (C90 6.8.2, C99と C11 6.10.2)。}

@item
@cite{@samp{#}演算子が、文字定数または文字列リテラルの汎用文字名を始める@samp{\}文字の前に@samp{\}文字を挿入するかどうか (C99 と C11 6.10.3.2)。}

@item
@cite{認識された@code{STDC #pragma}指令の動作 (C90 6.8.6, C99 と C11 6.10.6)。}

すべてのターゲットでGCCが受け入れたプラグマの詳細は@xref{Pragmas, , プラグマ, cpp, The C Preprocessor}。ターゲット指定のプラグマは@xref{Pragmas, , GCCによって受理されるプラグマ}。

@item
@cite{それぞれ翻訳の日付と時刻が利用できない場合の@code {__ DATE__}と@code {__ TIME__}の定義 (C90 6.8.8, C99 6.10.8, C11 6.10.8.1)。}

@end itemize

@node ライブラリ関数の実装
@section ライブラリ関数

これらの点のほとんどの動作は、Cライブラリの実装に依存しており、GCC自体では定義されていない。

@itemize @bullet
@item
@cite{マクロ@code {NULL}が展開するNULLポインタ定数 (C90 7.1.6, C99 7.17, C11 7.19)。}

@code{<stddef.h>}では、@code{NULL}は@code{((void *)0)}に展開される。 GCCは@code{NULL}を定義する他のヘッダを提供せず、いくつかのライブラリ実装はそれらのヘッダに他の定義を使用するかもしれない。

@end itemize

@node アーキテクチャ実装
@section アーキテクチャ

@itemize @bullet
@item
@cite{@code{<float.h>}、@code{<limits.h>}、および@code{<stdint.h>}ヘッダーで指定されたマクロに割り当てられた値または式(C90, C99 と C11 5.2.4.2, C99 7.18.2, C99 7.18.3, C11 7.20.2, C11 7.20.3)。}

ABIで決定される。

@item
@cite{関連付けられているスレッド以外のスレッドから自動またはスレッド記憶期間を持つオブジェクトに間接的にアクセスしようとした結果 (C11 6.2.4)。}

このようなアクセスは、任意のオブジェクトへの同時アクセスの場合と同様に、同時アクセスの同期要件と同じ要件に従う。

@item
@cite{任意のオブジェクトのバイト数、順序、およびエンコーディング（この国際標準で明示的に指定されていない場合） (C99とC11 6.2.6.1)。}

ABIで決定される。

@item
@cite{拡張アライメントがサポートされているかどうかと、サポートされているコンテキスト (C11 6.2.8)。}

@math{2 ^ {28}}（バイト）までの拡張配列は、自動保存期間のオブジェクトでサポートされている。 静的およびスレッド記憶期間のオブジェクトに対してサポートされているアライメントは、ABIによって決定される。

@item
@cite{基本型の_Alignof式によって返されたもの以外の有効な整列値（存在する場合） (C11 6.2.8)。}

有効なアラインメントは、2のべき乗から@math{2^{28}}までである。

@item
@cite{@code {sizeof}演算子と@code {_Alignof}演算子の結果の値 (C90 6.3.3.4, C99 と C11 6.5.3.4)。}

ABIで決定される。

@end itemize

@node ロケール固有の振る舞いの実装
@section ロケール固有の振る舞い

これらの点の動作はCライブラリの実装に依存し、GCC自体では定義されない。
