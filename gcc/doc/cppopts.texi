@c Copyright (C) 1999-2018 Free Software Foundation, Inc.
@c This is part of the CPP and GCC manuals.
@c For copying conditions, see the file gcc.texi.

@c ---------------------------------------------------------------------
@c Options affecting the preprocessor
@c ---------------------------------------------------------------------

@c If this file is included with the flag ``cppmanual'' set, it is
@c formatted for inclusion in the CPP manual; otherwise the main GCC manual.

@item -D @var{name}
@opindex D
@var{name}を定義@code{1}で事前に定義する。

@item -D @var{name}=@var{definition}
@var{definition}の内容はトークン化され、変換フェーズ3で@samp{#define}ディレクティブに現れたかのように処理される。 特に、定義は埋め込み改行文字によって切り詰められる。

シェルまたはシェルのようなプログラムからプリプロセッサを呼び出す場合は、シェルの構文で意味を持つ文字などの文字を保護するために、シェルの引用構文を使用する必要がある。

コマンドラインで関数のようなマクロを定義したい場合は、（存在する場合）引数のリストを等号の前にカッコで囲む。 括弧はほとんどのシェルにとって意味があるので、オプションをクウォートする必要がある。 @command{sh}と@command{csh}では、@option{-D'@var{name}(@var{args@dots{}})=@var{definition}'}が動作する。

@option{-D}と@option{-U}オプションは、コマンドラインで指定された順序で処理される。 すべての@option{-imacros@var{file}}と@option{-include@var{file}}オプションはすべての@option{-D}と@option{-U}の後に処理される。

@item -U @var{name}
@opindex U
組み込みであるか@option{-D}オプションであるかにかかわらず、事前の@var{name}の定義を取り消す。

@item -include @var{file}
@opindex include
@code{#include "file"}がプライマリソースファイルの最初の行として現れたかのように@var{file}を処理する。 ただし、@var{file}を検索する最初のディレクトリは、メインソースファイルを含むディレクトリの@emph{_代わりに_}、プリプロセッサの作業ディレクトリである。 そこに見つからない場合は、@code{#include "@dots{}"}検索チェーンの残りの部分で通常どおり検索される。

@option{-include}オプションが複数指定されている場合、ファイルはコマンドラインに表示される順序で含まれる。

@item -imacros @var{file}
@opindex imacros
@var{file}をスキャンして生成された出力がすべて破棄される点を除いて、@option{-include}とまったく同じ。 それが定義するマクロは定義されたままである。 これにより、宣言も処理せずにヘッダーからすべてのマクロを取得できる。

@option{-imacros}で指定されたすべてのファイルは、@option{-include}で指定されたすべてのファイルより前に処理される。

@item -undef
@opindex undef
システム固有またはGCC固有のマクロはあらかじめ定義しない。 標準の定義済みマクロは定義されたままである。
@ifset cppmanual
@xref{Standard Predefined Macros}.
@end ifset

@item -pthread
@opindex pthread
POSIXスレッド・ライブラリーを使用するために必要な追加のマクロを定義する。このオプションは、コンパイルとリンクの両方に一貫して使用する必要がある。このオプションは、GNU/Linuxターゲット、その他ほとんどのUnix派生物、さらには、x86 CygwinとMinGWターゲットでもサポートされている。

@item -M
@opindex M
@cindex @command{make}
@cindex dependencies, @command{make}
前処理の結果を出力する代わりに、メインソースファイルの依存関係を記述する@command{make}に適した規則を出力する。 プリプロセッサは、@option{-include}または@option{-imacros}コマンドラインオプションから来るものを含む、そのソースファイル、コロン、およびインクルードされたすべてのファイルの名前のオブジェクトファイル名を含む@command{make}ルールを出力する。

（@option{-MT}または@option{-MQ}で）明示的に指定されていない限り、オブジェクトファイル名は、接尾辞がobject file接尾辞で置き換えられ、先頭のディレクトリ部分が削除されたソースファイルの名前で構成される。 インクルードされたファイルがたくさんある場合、ルールは@samp{\}-改行を使用して複数の行に分割される。 ルールにはコマンドがない。

このオプションは、@option{-dM}のようにプリプロセッサのデバッグ出力を抑制しない。 このようなデバッグ出力を依存関係ルールと混同しないようにするには、依存関係出力ファイルを@option{-MF}で明示的に指定するか、@env{DEPENDENCIES_OUTPUT}（@pxref{環境変数}）などの環境変数を使用する必要がある。 デバッグ出力は通常どおり通常の出力ストリームに送られる。

@option{-M}をドライバに渡すと、@option{-E}が暗黙の@option{-w}で警告を抑止する。

@item -MM
@opindex MM
@option{-M}と似ているが、システムヘッダディレクトリにあるヘッダファイルや、そのようなヘッダから直接的または間接的に含まれるヘッダファイルについては言及しない。

これは、@samp{#include}ディレクティブで角かっこや二重引用符を選択しても、そのヘッダが@option{-MM}依存出力に現れるかどうかが決まっていないことを意味する。

@anchor{dashMF}
@item -MF @var{file}
@opindex MF
@option{-M}または@option {-MM}とともに使用する場合は、依存関係を書き込むファイルを指定する。 @option{-MF}スイッチが指定されていない場合、プリプロセッサは前処理された出力を送信する同じ場所にルールを送信する。

ドライバオプション@option{-MD}または@option{-MMD}とともに使用すると、@option{-MF}はデフォルトの依存関係出力ファイルを無効にする。

もし@var{file}が@file{-}であるならば、依存性は@file{stdout}に書かれる。

@item -MG
@opindex MG
@option{-MG}は、依存性生成を要求する@option{-M}などのオプションとともに、ヘッダファイルが生成されていないと仮定し、エラーを発生させずに依存関係リストに追加する。 依存ファイル名は、パスの前に@code{#include}ディレクティブから直接取り込まれる。 @option{-MG}は前処理された出力を抑制する。欠落したヘッダファイルはこれを役に立たなくする。

この機能は、Makeファイルの自動更新に使用される。

@item -MP
@opindex MP
このオプションは、メインファイル以外の依存関係ごとに偽のターゲットを追加するようにCPPに指示し、それぞれが何も依存しないようにする。 @file{Makefile}を更新せずにヘッダファイルを削除すると、@command{make}はエラーを回避する。

これは典型的な出力である：

@smallexample
test.o: test.c test.h

test.h:
@end smallexample

@item -MT @var{target}
@opindex MT
依存関係の生成によって生成されるルールのターゲットを変更する。 デフォルトでは、CPPはメイン入力ファイルの名前を取り、ディレクトリコンポーネントと@samp{.c}などのファイルサフィックスを削除し、プラットフォームの通常のオブジェクト接尾辞を追加する。 その結果がターゲットです。

@option{-MT}オプションは、指定した文字列と正確に一致するようにターゲットを設定する。 複数のターゲットが必要な場合は、それらを@option{-MT}の単一引数として指定するか、複数の@option{-MT}オプションを使用できる。

たとえば、@option{@w{-MT'$(objpfx)foo.o'}}の場合は、

@smallexample
$(objpfx)foo.o: foo.c
@end smallexample

@item -MQ @var{target}
@opindex MQ

@option{-MT}と同じだが、Makeに特別な文字をすべて引用符で囲む。 @option{@w{-MQ'$(objpfx)foo.o'}}は以下を与える。

@smallexample
$$(objpfx)foo.o: foo.c
@end smallexample

デフォルトのターゲットは、@option{-MQ}のように自動的にクォートされる。

@item -MD
@opindex MD
@option{-MD}は、@option{-E}が暗黙指定されていないことを除いて、@option{-M -MF @var{file}}と同等である。 ドライバは、@option{-o}オプションが指定されているかどうかに基づいて、@var{file}を決定する。 そうである場合、ドライバはその引数を使用しますが接尾辞@file{.d}を使用する。そうでない場合は、入力ファイルの名前を取り、ディレクトリコンポーネントと接尾辞を削除し、@file{.d}接尾辞を適用する。

@option{-MD}を@option{-E}と組み合わせて使用すると、@option{-o}スイッチは依存関係出力ファイル（@pxref {dashMF,,-MF}）を指定すると解釈されるが、 @option{-E}を指定しなければ、各@option{-o}はターゲットオブジェクトファイルを指定すると解釈される。

@option{-E}は暗黙指定されていないので、@option{-MD}を使用して、コンパイルプロセスの副作用として依存関係出力ファイルを生成することができる。

@item -MMD
@opindex MMD
@option{-MD}と同様だが、システムヘッダーファイルではなく、ユーザーヘッダーファイルのみを記述する。

@item -fpreprocessed
@opindex fpreprocessed
入力ファイルがすでに前処理されていることをプリプロセッサに示す。 これは、マクロ展開、トリグラフ変換、エスケープされた改行スプライシング、およびほとんどのディレクティブの処理を抑制する。 プリプロセッサは依然としてコメントを認識して削除するので、@option{-C}で前処理されたファイルを問題なくコンパイラに渡すことができる。 このモードでは、統合プリプロセッサはほとんどフロントエンド用のトークナイザと変わらない。

入力ファイルが拡張子@samp{.i}、@samp{.ii}または@samp{.mi}のいずれかを持つ場合、@option{-fpreprocessed}は暗黙的である。 これらはGCCが@option{-save-temps}によって作成された前処理されたファイルに使用する拡張機能である。

@item -fdirectives-only
@opindex fdirectives-only
前処理のときは、ディレクティブを処理するが、マクロは展開しない。

オプションの動作は、@option{-E}オプションと@option{-fpreprocessed}オプションによって異なります。

@option{-E}を使用すると、前処理は@code{#define}、@code{#ifdef}、@code{#error}などのディレクティブの処理に限定される。 マクロ展開やトリグラフ変換などの他のプリプロセッサ処理は行われない。 さらに、@option {-dD}オプションは暗黙的に有効になっている。

@option{-fpreprocessed}を使用すると、コマンドラインと大部分の組み込みマクロの事前定義が無効になる。 コンテキスト依存の@code{__ LINE__}などのマクロは、通常どおり処理される。 これにより、@code{-E -fdirectives-only}で前処理されたファイルのコンパイルが可能になる。

@option{-E}と@option{-fpreprocessed}の両方で、@option{-fpreprocessed}のルールが優先される。 これにより、@code{-E -fdirectives-only}で前処理されたファイルの完全な前処理が可能になる。

@item -fdollars-in-identifiers
@opindex fdollars-in-identifiers
@anchor{fdollars-in-identifiers}
識別子に@samp{$}を許容する。
@ifset cppmanual
@xref{Identifier characters}.
@end ifset

@item -fextended-identifiers
@opindex fextended-identifiers
識別子のユニバーサルキャラクタ名を許容する。 このオプションは、C99（およびそれ以降のC標準バージョン）およびC++ではデフォルトで有効になっている。

@item -fno-canonical-system-headers
@opindex fno-canonical-system-headers
前処理の際に、正規化でシステムヘッダパスを短縮しない。

@item -fmax-include-depth=@var{depth}
@opindex fmax-include-depth
ネストされた#includeの最大深度を設定します。 デフォルトは200です。

@item -ftabstop=@var{width}
@opindex ftabstop
タブストップ間の距離を設定する。 これは、行にタブがあったとしても、プリプロセッサーが警告またはエラーの正しい列番号を報告するのに役立つ。 値が1より小さいか100より大きい場合、このオプションは無視される。 デフォルトは8である。

@item -ftrack-macro-expansion@r{[}=@var{level}@r{]}
@opindex ftrack-macro-expansion
マクロ展開全体のトークンの場所を追跡する。 これにより、マクロ展開でコンパイルエラーが発生した場合、コンパイラは現在のマクロ展開スタックに関する診断を発行できる。 このオプションを使用すると、プリプロセッサとコンパイラはより多くのメモリを消費する。 @var{level}パラメータを使用して、トークンの位置追跡の精度レベルを選択し、必要に応じてメモリ消費を減らすことができる。 @var{level}の値@samp {0}はこのオプションを無効にする。 値@samp{1}は、メモリーオーバーヘッドを最小限に抑えるために、劣化モードのトークンの場所を追跡する。 このモードでは、関数のようなマクロの引数を展開した結果のすべてのトークンは同じ場所にある。 値@samp{2}はトークンの位置を完全に追跡する。 この値は、メモリに貪欲である。 このオプションに引数を指定しないと、デフォルトのパラメータ値は@samp{2}になる。

@code {-ftrack-macro-expansion=2}はデフォルトで有効になっていることに注意。

@item -fmacro-prefix-map=@var{old}=@var{new}
@opindex fmacro-prefix-map
ディレクトリ@file{@var{old}}にあるファイルを前処理する場合、ファイルがディレクトリ@file{@var{new}}にあるかのように@code{__ FILE__}マクロと@code{__ BASE_FILE__}マクロを展開する。 これは絶対パスを相対パスに変更するために@var{new}に@file{.}を使用することで、場所に依存しないより再現性のあるビルドが可能になる。このオプションは、コンパイル時に@code{__builtin_FILE()}にも影響する。 @option{-ffile-prefix-map}も参照せよ。
 
@item -fexec-charset=@var{charset}
@opindex fexec-charset
@cindex character set, execution
文字列と文字定数で使われる実行の文字集合をセットする。デフォルトはUTF-8である。@var{charset}はシステムの@code{iconv}ライブラリルーチンによってサポートされたエンコードのどれも使うことができる。

@item -fwide-exec-charset=@var{charset}
@opindex fwide-exec-charset
@cindex character set, wide execution
ワイド文字列と文字定数に使われるワイド実行文字集合をセットする。デフォルトは、@code{wchar_t}の幅に対応してUTF-32かUTF-16である。@option{-fexec-charset}と同様に、@var{charset}はシステムの@code{iconv}ライブラリルーチンによってサポートされたエンコードのどれも使うことができる。ただし、@code{wchar_t}に正しく合わないエンコードでは問題が生じるだろう。

@item -finput-charset=@var{charset}
@opindex finput-charset
@cindex character set, input
入力ファイルの文字セットからGCCで使用されるソース文字セットへの変換に使用される入力文字セットを設定する。ロケールが指定されていない場合、またはGCCがロケールからこの情報を取得できない場合、デフォルトはUTF-8である。 これは、ロケールまたはこのコマンドラインオプションのいずれかによって上書きすることができる。 現在、コマンドラインオプションは、競合が発生した場合に優先される。 @var{charset}は、システムの@code{iconv}ライブラリルーチンでサポートされているすべてのエンコーディングである。

@ifclear cppmanual
@item -fpch-deps
@opindex fpch-deps
プリコンパイルされたヘッダー（@pxref{Precompiled Headers}）を使用する場合、このフラグは依存関係出力フラグにプリコンパイル済みヘッダーの依存関係のファイルもリストさせる。 指定されていない場合、プリコンパイルされたヘッダーが使用されたときにこれらのファイルは参照されないため、プリコンパイルされたヘッダーのみがリストされ、作成に使用されたファイルはリストされない。

@item -fpch-preprocess
@opindex fpch-preprocess
このオプションは、プリコンパイルされたヘッダ（@pxref{Precompiled Headers}）を@option{-E}とともに使用できるようにする。 プリコンパイルされたヘッダが見つかった場所とその@var{filename}をマークするために、特殊な@code{#pragma}、@code{#pragma GCC pch_preprocess "@var{filename}"}を出力に挿入する。 @option{-fpreprocessed}が使用されているとき、GCCはこの@code{#pragma}を認識し、PCHをロードします。

結果として得られる前処理された出力は、GCCへの入力として本当に適しているだけなので、このオプションはデフォルトではオフになっている。 これは@option{-save-temps}によってスイッチオンされる。

自分のコードに@code{#pragma}を書き込むべきではないが、PCHファイルが別の場所で利用可能な場合は、ファイル名を編集することは安全である。 ファイル名は絶対パスでも、GCCのカレントディレクトリからの相対パスでもかまわない。
@end ifclear

@item -fworking-directory
@opindex fworking-directory
@opindex fno-working-directory
プリプロセッサの出力にlinemarkerを生成できるようにする。これにより、コンパイラは前処理時に現在の作業ディレクトリを知ることができる。 このオプションを有効にすると、プリプロセッサーは、最初のラインマーカーの後に、現在の作業ディレクトリーに2つのスラッシュが続く2番目のラインマーカーを発行する。 GCCはこのディレクトリを、前処理された入力に存在する場合、いくつかのデバッグ情報形式で現在の作業ディレクトリとして発行されるディレクトリとして使用する。 このオプションは、デバッグ情報が有効になっている場合は暗黙的に有効になっているが、これは否定された形式の@option{-fno-working-directory}で禁止することができる。 @option{-P}フラグがコマンドラインにある場合、@code{#line}ディレクティブはまったく出力されないので、このオプションは効果がない。

@item -A @var{predicate}=@var{answer}
@opindex A
述語@var{predicate}と@var {answer}でアサーションを行う。 この形式は、@option{-A @var{predicate}(@var{answer})}より古い形式よりも優先される。これはシェルの特殊文字を使用しないため、引き続きサポートされている。
@ifset cppmanual
@xref{Obsolete Features}.
@end ifset

@item -A -@var{predicate}=@var{answer}
述語@var{predicate}と@var{answer}でのアサーションをキャンセルする。

@item -C
@opindex C
コメントを破棄しない。 すべてのコメントは、処理されたディレクティブのコメントを除いて、出力ファイルに渡され、ディレクティブとともに削除される。

@option{-C}を使用するときは、副作用の準備が必要である。 プリプロセッサはトークンとしてコメントを処理する。 例えば、ディレクティブ行の先頭に現れるコメントは、その行を最初のトークンが@samp{#}でなくなったので、その行を通常のソース行に変換する効果がある。

@item -CC
@opindex CC
マクロ展開中も含めてコメントを破棄しない。 これは@option{-C}と似ているが、マクロに含まれるコメントも、マクロが展開される出力ファイルにも渡される。

@option{-C}オプションの副作用に加えて、@option{-CC}オプションはマクロ内のすべてのC++スタイルのコメントをCスタイルのコメントに変換する。 これは、そのマクロの後での使用が誤ってソース行の残りの部分をコメントアウトするのを防ぐためである。

@option{-CC}オプションは一般に、lintコメントをサポートするために使用される。

@item -P
@opindex P
プリプロセッサからの出力にラインマーカーの生成を禁止する。
これは、Cコードではないものでプリプロセッサを実行しているときに有用であり、ラインマーカーによって混乱する可能性があるプログラムに送られるだろう。
@ifset cppmanual
@xref{Preprocessor Output}.
@end ifset

@cindex traditional C language
@cindex C language, traditional
@item -traditional
@itemx -traditional-cpp
@opindex traditional-cpp
@opindex traditional

ISO Cプリプロセッサではなく、標準化前のCプリプロセッサの動作を真似しようとする。
@ifset cppmanual
@xref{Traditional Mode}.
@end ifset
@ifclear cppmanual
詳細はGNU CPPマニュアル参照。
@end ifclear

GCCは標準化前のCコンパイラをエミュレートしようとはしないことに注意。これらのオプションは@option{-E}スイッチでのみ、またはCPPを明示的に呼び出す際にのみサポートされている。

@item -trigraphs
@opindex trigraphs
ISO Cトライグラフをサポートする。これらは3文字のシーケンスで、すべてが@samp{??}で始まり、
ISO Cで定義されています。 たとえば、@samp{??/}は@samp{\}を表す。したがって、@samp{'??/n'}は改行の文字定数である。
@ifset cppmanual
@xref{Initial processing}.
@end ifset

@ifclear cppmanual
9のトライグラフとその置換先は以下である。

@smallexample
Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-
Replacement:      [    ]    @{    @}    #    \    ^    |    ~
@end smallexample
@end ifclear

デフォルトでは、GCCはトライグラフを無視するが、標準準拠モードではそれを変換する。 @option{-std}オプションと@option{-ansi}オプションを参照せよ。

@item -remap
@opindex remap
特別なコードを有効して、MS-DOSなどの非常に短いファイル名しか許可しないファイルシステムで動かす。

@item -H
@opindex H
他の通常のアクティビティに加えて、使用された各ヘッダファイルの名前を表示する。 それぞれの名前はインデントされて@samp{#include}スタックの深さを示す。 たとえ無効であっても、コンパイル済みのヘッダーファイルも出力される。 無効なプリコンパイル済みヘッダーファイルは@samp{...x}で印刷され、有効なものは@samp{...!}で印刷される。

@item -d@var{letters}
@opindex d
@var{letters}で指定されたコンパイル時にデバッグダンプを作成するように指示する。 ここで説明するフラグは、プリプロセッサに関連するフラグである。 他の@var{letters}は、コンパイラによって解釈されるか、GCCの将来のバージョン用に予約されているので、静かに無視されまる。 振る舞いが矛盾する@var{letters}を指定した場合、結果は未定義である。
@ifclear cppmanual
詳しい情報は@xref{Developer Options}
@end ifclear

@table @gcctabopt
@item -dM
@opindex dM
通常の出力の代わりに、プリプロセッサの実行中に定義されたすべてのマクロの定義済みマクロを含む@samp{#define}ディレクティブのリストを生成する。 これにより、使用しているプリプロセッサのバージョンで定義されている内容を知ることができる。 あなたがファイル@file{foo.h}を持っていないと仮定すると、コマンド

@smallexample
touch foo.h; cpp -dM foo.h
@end smallexample

@noindent
すべての定義済みマクロを表示する。

@ifclear cppmanual
@option{-d}を@option{-E}オプションなしで使用すると、@option{-dM}は@option{-fdump-rtl-mach}の同義語として解釈される。
@xref{Developer Options, , ,gcc}.
@end ifclear

@item -dD
@opindex dD
2つの点を除いて@option{-dM}と似ている。それは定義済みマクロを含@emph{_まず_}、@samp{#define}ディレクティブと前処理の結果の@emph{_両方_}を出力する。出力の両方の種類は標準出力ファイルへと出力される。

@item -dN
@opindex dN
@option{-dD}と似ているが、マクロ名のみを生成し、式はしない。

@item -dI
@opindex dI
前処理の結果に加えて、@samp{#include}ディレクティブも出力する。

@item -dU
@opindex dU
@option{-dD}と似ているが、展開された、もしくはその定義性がプリプロセッサディレクティブで試験されたもののみが出力される。出力はマクロの使用か試験まで遅延される。@samp{#undef}ディレクティブは、テストされたマクロでは出力されるが、その時点では未定義である。
@end table

@item -fdebug-cpp
@opindex fdebug-cpp
このオプションは、GCCのデバッグにのみ有効です。 CPPまたは@option{-E}から使用すると、ロケーションマップに関するデバッグ情報をダンプする。 出力内のすべてのトークンの前には、その場所が所属するマップのダンプがある。

@option{-E}を指定せずにGCCから使用した場合、このオプションは効果がない。

